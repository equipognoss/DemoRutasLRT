<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gnoss.ApiWrapper</name>
    </assembly>
    <members>
        <member name="T:Gnoss.ApiWrapper.ApiModel.RegisterLoadModel">
            <summary>
            Parameters to register a resources upload
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.RegisterLoadModel.load_id">
            <summary>
            Load identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.RegisterLoadModel.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.RegisterLoadModel.email_responsible">
            <summary>
            Developers email responsible of this upload of resources
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.CommunityModel">
            <summary>
            Represents a community
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommunityModel.community_name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommunityModel.community_short_name">
            <summary>
            Short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommunityModel.description">
            <summary>
            Brief Description
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommunityModel.tags">
            <summary>
            Tags (comma separated)
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommunityModel.type">
            <summary>
            Type: 0 for standard communities, 5 for static catalogs, 8 for static catalogs without members
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommunityModel.access_type">
            <summary>
            Acces type: 0: public (Any user can be member), 1: private (Only users with invitation can be members), 2: restricted (users can request access, but admin must accept the requests), 3: reserved (private community childred of other private community)
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommunityModel.parent_community_short_name">
            <summary>
            Parent community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommunityModel.admin_id">
            <summary>
            User identifier of the administrator of the community
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommunityModel.organization_short_name">
            <summary>
            Organization short name of the user
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommunityModel.logo">
            <summary>
            Logo for the community
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.CommunityInfoModel">
            <summary>
            Represents a community
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommunityInfoModel.name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommunityInfoModel.short_name">
            <summary>
            Short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommunityInfoModel.description">
            <summary>
            Brief Description
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommunityInfoModel.tags">
            <summary>
            Tags (comma separated)
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommunityInfoModel.type">
            <summary>
            Community's type
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommunityInfoModel.categories">
            <summary>
            Community's categories
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommunityInfoModel.users">
            <summary>
            Community's users
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.CategoryName">
            <summary>
            Represents the name of a category in a specific language
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CategoryName.language">
            <summary>
            Language of the name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CategoryName.category_name">
            <summary>
            Category's name
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.CategoryNames">
            <summary>
            Represents the name of the category in all of the languages that has been defined
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CategoryNames.category_id">
            <summary>
            Category identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CategoryNames.category_names_list">
            <summary>
            Name per language
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ThesaurusModel">
            <summary>
            Represents a thesaurus
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ThesaurusModel.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ThesaurusModel.thesaurus">
            <summary>
            Thesaurus in XML Format
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ThesaurusCategory">
            <summary>
            Represents a thesaurus category
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ThesaurusCategory.category_id">
            <summary>
            Category identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ThesaurusCategory.category_name">
            <summary>
            Category name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ThesaurusCategory.Children">
            <summary>
            Children categories
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ThesaurusCategory.parent_category_id">
            <summary>
            Parent category identifier
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.ApiModel.ThesaurusCategory.#ctor">
            <summary>
            ThesaurusCategory constructor
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ConfigurationModel">
            <summary>
            Represents the configuration of a community
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ConfigurationModel.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ConfigurationModel.settings">
            <summary>
            Settings in XML format
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.AddMemberModel">
            <summary>
            Parameters to add a member to a commmunity
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.AddMemberModel.user_id">
            <summary>
            User identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.AddMemberModel.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.AddMemberModel.organization_short_name">
            <summary>
            Organization short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.AddMemberModel.identity_type">
            <summary>
            Identity type of the user: 0 personal, 1 personal professional, 2 corporative professional. By default: 0
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.UserCommunityModel">
            <summary>
            Represents a user in a community
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.UserCommunityModel.user_id">
            <summary>
            User identifier that we will delete from the community
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.UserCommunityModel.community_short_name">
            <summary>
            Short name of the community
            </summary>
            <example>ferdev</example>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.GroupCommunityModel">
            <summary>
            Represents a community group
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.GroupCommunityModel.group_id">
            <summary>
            Group identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.GroupCommunityModel.group_short_name">
            <summary>
            Group short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.GroupCommunityModel.group_name">
            <summary>
            Group name
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.GroupOrgCommunityModel">
            <summary>
            Represents an organization group
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.GroupOrgCommunityModel.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.GroupOrgCommunityModel.group_short_name">
            <summary>
            Group short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.GroupOrgCommunityModel.organization_short_name">
            <summary>
            Organization short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.GroupOrgCommunityModel.identity_type">
            <summary>
             Identity type of the user: 0 personal, 1 personal professional, 2 corporative professional. By default: 0
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.CreateGroupCommunityModel">
            <summary>
            Parameters to create a community group
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CreateGroupCommunityModel.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CreateGroupCommunityModel.group_short_name">
            <summary>
            Group short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CreateGroupCommunityModel.group_name">
            <summary>
            Group name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CreateGroupCommunityModel.description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CreateGroupCommunityModel.tags">
            <summary>
            Tags (comma separated)
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CreateGroupCommunityModel.members">
            <summary>
            Initial members of the group
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CreateGroupCommunityModel.send_notification">
            <summary>
            True if a welcom message must be sent to the members of the group (by default false)
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.DeleteGroupCommunityModel">
            <summary>
            Parameters to delete a community group
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.DeleteGroupCommunityModel.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.DeleteGroupCommunityModel.group_short_name">
            <summary>
            Group short name
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.MembersGroupCommunityModel">
            <summary>
            Represents the members of a group community
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.MembersGroupCommunityModel.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.MembersGroupCommunityModel.group_short_name">
            <summary>
            Group short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.MembersGroupCommunityModel.members">
            <summary>
            Group members
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.MembersGroupCommunityModel.send_notification">
            <summary>
            True if a welcom message must be sent to the members of the group (by default false)
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ChangeNameCommunityModel">
            <summary>
            Parameters to change the name of a community
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ChangeNameCommunityModel.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ChangeNameCommunityModel.community_name">
            <summary>
            New name
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ExtraRegisterData">
            <summary>
            Extra register data
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ExtraRegisterData.key">
            <summary>
            key of the estra register data
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ExtraRegisterData.title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ExtraRegisterData.options">
            <summary>
            Options of the extra register data
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.NotificationModel">
            <summary>
            Notification parameters
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.NotificationModel.subject">
            <summary>
            Subject of the email
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.NotificationModel.message">
            <summary>
            Message of the email
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.NotificationModel.is_html">
            <summary>
            True if the message contains html
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.NotificationModel.receivers">
            <summary>
            List of email receivers
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.NotificationModel.sender_mask">
            <summary>
            Sender mask
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.SparqlObject.head">
            <summary>
            Head of the sparql query
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.SparqlObject.results">
            <summary>
            Results of the sparql query
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ParamsMoveNode">
            <summary>
            Parameters to move a node
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsMoveNode.thesaurus_ontology_url">
            <summary>
            Ontology URL of the thesaurus
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsMoveNode.resources_ontology_url">
            <summary>
            Ontology URL of the resources that references this thesaurus
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsMoveNode.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsMoveNode.category_id">
            <summary>
            Identificator of the category
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsMoveNode.path">
            <summary>
            Path from root to the new parent category
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ParamsDeleteNode">
            <summary>
            Parameters to delete a node
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsDeleteNode.thesaurus_ontology_url">
            <summary>
            URL of the thesaurus ontology
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsDeleteNode.resources_ontology_url">
            <summary>
            Ontology URL of the resources that references this thesaurus
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsDeleteNode.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsDeleteNode.category_id">
            <summary>
            Identificator of the category
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsDeleteNode.path">
            <summary>
            Path from root to her last child to which will move the resources that are in the deleted category
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ParamsParentNode">
            <summary>
            Parameters to change the parent node of a node
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsParentNode.thesaurus_ontology_url">
            <summary>
            URL of the thesaurus ontology
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsParentNode.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsParentNode.parent_catergory_id">
            <summary>
            Identificator of the parent category
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsParentNode.child_category_id">
            <summary>
            Identificator of the child category
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ParamsChangeName">
            <summary>
            Parameters to chage the name of a node
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsChangeName.thesaurus_ontology_url">
            <summary>
            URL of the thesaurus ontology
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsChangeName.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsChangeName.category_id">
            <summary>
            Identificator of the category
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsChangeName.category_name">
            <summary>
            Name of the category
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ParamsInsertNode">
            <summary>
            Parameters to insert a node
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsInsertNode.thesaurus_ontology_url">
            <summary>
            URL of the thesaurus ontology
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsInsertNode.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsInsertNode.rdf_category">
            <summary>
            RDF of the category
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ParamsUserCommunity">
            <summary>
            Parameters for a community user
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsUserCommunity.user_short_name">
            <summary>
            User short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsUserCommunity.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ParamsLoginPassword">
            <summary>
            Parameters for login and password
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsLoginPassword.login">
            <summary>
            Login o email of the user
            </summary>
            <example>fer123</example>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsLoginPassword.password">
            <summary>
            Password of the user
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ParamsAddUserOrg">
            <summary>
            Parameters for add a user in a organization
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsAddUserOrg.user_id">
            <summary>
            User identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsAddUserOrg.organization_short_name">
            <summary>
            Organization short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsAddUserOrg.position">
            <summary>
            User position in the organization
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsAddUserOrg.communities_short_names">
            <summary>
            Communities short names where the user is going to be added (The organization must be member of all of them)
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ParamsAddUserOrgGroups">
            <summary>
            Parameters for add a user in a organization group
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsAddUserOrgGroups.user_id">
            <summary>
            User identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsAddUserOrgGroups.organization_short_name">
            <summary>
            Organization short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ParamsAddUserOrgGroups.groups_short_names">
            <summary>
            Groups where the user is going to be added
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.User">
            <summary>
            Represents a user
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.User.name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.User.last_name">
            <summary>
            Last name or Family name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.User.email">
            <summary>
            Email
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.User.password">
            <summary>
            Password (Only for update, not for query)
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.User.extra_data">
            <summary>
            User extra data
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.User.user_events">
            <summary>
            User events
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.User.aux_data">
            <summary>
            Auxiliary data
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.User.community_id">
            <summary>
            Community identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.User.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.User.user_short_name">
            <summary>
            User short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.User.user_id">
            <summary>
            User identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.User.id_card">
            <summary>
            User identification (passport number, dni...)
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.User.born_date">
            <summary>
            User born date
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.User.country_id">
            <summary>
            Country identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.User.country">
            <summary>
            User country
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.User.province_id">
            <summary>
            Province identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.User.provice">
            <summary>
            User province
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.User.city">
            <summary>
            User city
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.User.address">
            <summary>
            User address
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.User.postal_code">
            <summary>
            User postal code
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.User.join_community_date">
            <summary>
            Date when the member has joined to this community
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.User.sex">
            <summary>
            H for Male or M to Female
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.User.preferences">
            <summary>
            User preferences
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.User.receive_newsletter">
            <summary>
            True if this user must recive the community newsletter
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.User.languaje">
            <summary>
            User prefered language
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ExtraUserData">
            <summary>
            User extra data
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ExtraUserData.name_id">
            <summary>
            Identificator of the extra data
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ExtraUserData.name">
            <summary>
            Extra data name. 
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ExtraUserData.value_id">
            <summary>
            Extra data value identifier. Only if the list of values has been defined
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ExtraUserData.value">
            <summary>
            Extra data value
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.UserEvent">
            <summary>
            User event
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.UserEvent.event_id">
            <summary>
            Event identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.UserEvent.name">
            <summary>
            Event name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.UserEvent.Date">
            <summary>
            Event date
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.UserNoveltiesModel">
            <summary>
            Properties of a user
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.UserNoveltiesModel.user_id">
            <summary>
            User identificator
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.UserNoveltiesModel.community_subscriptions">
            <summary>
            User subscriptions to community categories. <see cref="T:Gnoss.ApiWrapper.ApiModel.CommunitySubscriptionModel"/>
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.UserNoveltiesModel.user_subscriptions">
            <summary>
            User subscriptions to another user. <see cref="T:Gnoss.ApiWrapper.ApiModel.UserSubscriptionModel"/>
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.UserNoveltiesModel.user_community_membership">
            <summary>
            User info about community membership. <see cref="T:Gnoss.ApiWrapper.ApiModel.UserCommunityMembership"/>
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.CommunitySubscriptionModel">
            <summary>
            Represents the subscription to a community
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommunitySubscriptionModel.user_id">
            <summary>
            Subscriptor user identificator
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommunitySubscriptionModel.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommunitySubscriptionModel.category_list">
            <summary>
            Categories wich user is subscribed to
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.UserSubscriptionModel">
            <summary>
            Represents the subscription from user to another user
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.UserSubscriptionModel.user_id">
            <summary>
            Subscriptor user identificator
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.UserSubscriptionModel.user_followed_id">
            <summary>
            User identificator who user is subscribed to
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.UserSubscriptionModel.community_short_name">
            <summary>
            Community short name. Null if user is a follower
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.UserSubscriptionModel.subscription_date">
            <summary>
            Categories wich user is subscribed to
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.UserCommunityMembership">
            <summary>
            Represents the user community membership information 
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.UserCommunityMembership.user_id">
            <summary>
            User identificator
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.UserCommunityMembership.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.UserCommunityMembership.registration_date">
            <summary>
            User community registration date in ISO 8601 format
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.UserCommunityMembership.administrator_rol">
            <summary>
            Indicates if th user manages the community
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ResourceVisibility">
            <summary>
            Resource visibility
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.ApiModel.ResourceVisibility.open">
            <summary>
            All users can view the resource
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.ApiModel.ResourceVisibility.editors">
            <summary>
            Only editors can view the resource
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.ApiModel.ResourceVisibility.communitymembers">
            <summary>
            Only community members can view the resource
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.ApiModel.ResourceVisibility.specific">
            <summary>
            Specific users can view the resource
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.GnossResourceProperty">
            <summary>
            Resource property to modify in loads
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.ApiModel.GnossResourceProperty.none">
            <summary>
            Any property
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.ApiModel.GnossResourceProperty.title">
            <summary>
            resource title property
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.ApiModel.GnossResourceProperty.description">
            <summary>
            resource description property
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.TiposDocumentacion">
            <summary>
            Document types
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.ApiModel.TiposDocumentacion.hyperlink">
            <summary>
            HyperLink
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.ApiModel.TiposDocumentacion.video">
            <summary>
            Video
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.ApiModel.TiposDocumentacion.server_file">
            <summary>
            Server file
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.ApiModel.TiposDocumentacion.ontology">
            <summary>
            Ontology
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.ApiModel.TiposDocumentacion.image">
            <summary>
            Image
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.ApiModel.TiposDocumentacion.note">
            <summary>
            Note
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.ApiModel.TiposDocumentacion.newsletter">
            <summary>
            Newsletter
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.ApiModel.TiposDocumentacion.audio">
            <summary>
            Audio
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.ApiModel.TiposDocumentacion.secondary_ontology">
            <summary>
            Secondary ontology
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.AttachedResourceFilePropertyTypes">
            <summary>
            Types of properties of the file for the attached resources
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.ApiModel.AttachedResourceFilePropertyTypes.file">
            <summary>
            Indicates the attached resource is a file
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.ApiModel.AttachedResourceFilePropertyTypes.image">
            <summary>
            Indicates the attached resource is an image
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.ApiModel.AttachedResourceFilePropertyTypes.downloadableFile">
            <summary>
            Indicates the attached resource is a link file
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ModifyTripleListModel">
            <summary>
            Represents a list of triples to modify
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ModifyTripleListModel.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ModifyTripleListModel.secondary_ontology_url">
            <summary>
            URL of the secondary ontology
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ModifyTripleListModel.secondary_entity">
            <summary>
            Identificator of the secondary entity
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ModifyTripleListModel.triple_list">
            <summary>
            Triple list to modify. It's a array of string arrays with three items: Old object, Predicate, New object. To delete a triple, send the New object empty
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.MassiveTripleModifyParameters">
            <summary>
            Parameters for massive modification
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.MassiveTripleModifyParameters.triples">
            <summary>
            Triples to modify
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.MassiveTripleModifyParameters.ontology">
            <summary>
            Ontology to modify
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.MassiveTripleModifyParameters.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.MassiveTriple">
            <summary>
            Triple for massive modification
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.MassiveTriple.main_resource_id">
            <summary>
            Main resource id, like http://gnoss.com/items/Product_0015bb97-81fd-5ee7-a70d-4474f4c723e9_9b8d4c13-b443-4e3c-9a93-252d9e12df8a
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.MassiveTriple.subject">
            <summary>
            Subject of the triple
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.MassiveTriple.predicate">
            <summary>
            Predicate of the triple
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.MassiveTriple.new_value">
            <summary>
            (Optional) New value of the triple
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.MassiveTriple.old_value">
            <summary>
            (Optional) Old value of the triple
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.MassiveTriple.is_new_auxiliary_entity">
            <summary>
            (Optional) Indicates if the new value is the subject of a new auxiliary entity. 
            You must set it to true if you are creating a new auxiliary entity. 
            If it's a new auxiliary entity, you must send the rdf:type and rdfs:label triples too. 
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.SecondaryEntityModel">
            <summary>
            Represents a secondary entity
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.SecondaryEntityModel.ontology_url">
            <summary>
            Ontology url
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.SecondaryEntityModel.community_short_name">
            <summary>
            Communtiy short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.SecondaryEntityModel.entity_id">
            <summary>
            Entity identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.SecondaryEntityModel.rdf">
            <summary>
            RDF of the secondary entity
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.FileOntology">
            <summary>
            Represents an Ontology file
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.FileOntology.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.FileOntology.ontology_name">
            <summary>
            Ontology name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.FileOntology.file_name">
            <summary>
            File name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.FileOntology.file">
            <summary>
            The file bytes
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.sparqlQuery">
            <summary>
            Represents a sparql query
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.sparqlQuery.ontology">
            <summary>
            Ontology name or community identifier to query. It will be used in the form clause
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.sparqlQuery.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.sparqlQuery.query_select">
            <summary>
            Select clause of the sparql query
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.sparqlQuery.query_where">
            <summary>
            Where clause of the sparql query
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.UnsharedResourceParams">
            <summary>
            Parameters to unshared a resource
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.UnsharedResourceParams.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.UnsharedResourceParams.resource_id">
            <summary>
            Resource identifier
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.Triples">
            <summary>
            Triples representation
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.Triples.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.Triples.resource_id">
            <summary>
            Resource identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.Triples.triples_list">
            <summary>
            Triple list
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.Triples.publish_home">
            <summary>
            True if the resource must be published in the home of the community (by default false)
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.Triples.end_of_load">
            <summary>
            True if it's the end of the load and must delete the cache
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.Triple">
            <summary>
            Triple representation
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.Triple.subject">
            <summary>
            Subject
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.Triple.predicate">
            <summary>
            Predicate
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.Triple.object_t">
            <summary>
            Object
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.Triple.language">
            <summary>
            Languaje of the object
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.KeyReaders">
            <summary>
            Resource editors
            </summary>
            <summary>
            Resource readers
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.KeyReaders.resource_id">
            <summary>
            Resource identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.KeyReaders.readers">
            <summary>
            Users short names of the resource editors
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.KeyReaders.reader_groups">
            <summary>
            Editors group
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ReaderGroup">
            <summary>
            Represents a reader group
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ReaderGroup.group_short_name">
            <summary>
            Group short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ReaderGroup.organization_short_name">
            <summary>
            Organization short name
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.KeyEditors">
            <summary>
            Resource editors
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.KeyEditors.resource_id">
            <summary>
            Resource identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.KeyEditors.editors">
            <summary>
            Users short names of the resource editors
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.KeyEditors.editor_groups">
            <summary>
            Editors group
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.EditorGroup">
            <summary>
            Represents an editor group
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.EditorGroup.group_short_name">
            <summary>
            Group short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.EditorGroup.organization_short_name">
            <summary>
            Organization short name
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.GetDownloadUrlParams">
            <summary>
            Parameters for get the download url of a resource
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.GetDownloadUrlParams.resource_id_list">
            <summary>
            Resource list to get their download URL
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.GetDownloadUrlParams.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ResponseGetUrl">
            <summary>
            Parameters to get a resource url
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResponseGetUrl.resource_id">
            <summary>
            Resource identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResponseGetUrl.url">
            <summary>
            Url of the resource
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.GetUrlParams">
            <summary>
            Parameters to get the resource url
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.GetUrlParams.resource_id_list">
            <summary>
            Resource list to get their download URL
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.GetUrlParams.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.GetUrlParams.language">
            <summary>
            Language of the url
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.SetReadersEditorsParams">
            <summary>
            Parameters to set the resource editors
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.SetReadersEditorsParams.resource_id">
            <summary>
            Resource identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.SetReadersEditorsParams.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.SetReadersEditorsParams.visibility">
            <summary>
            Visibility of the resurce <see cref="T:Gnoss.ApiWrapper.ApiModel.ResourceVisibility"/> enumeration
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.SetReadersEditorsParams.readers_list">
            <summary>
            Users short names of the resource editors or readers
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.SetReadersEditorsParams.publish_home">
            <summary>
            True if the resource must be published in the home of the community (by default false)
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ReaderEditor">
            <summary>
            Represents a resource reader or editor
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ReaderEditor.user_short_name">
            <summary>
            User short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ReaderEditor.group_short_name">
            <summary>
            Group short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ReaderEditor.organization_short_name">
            <summary>
            Organization short name
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ResponseGetCategories">
            <summary>
            Represents the categories of a resource
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResponseGetCategories.resource_id">
            <summary>
            Resource identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResponseGetCategories.category_id_list">
            <summary>
            Categories of the resource
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ResponseGetTags">
            <summary>
            Represents the tags of a resource
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResponseGetTags.resource_id">
            <summary>
            Resource identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResponseGetTags.tags">
            <summary>
            Resource tags
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ResponseGetMainImage">
            <summary>
            Represents the image of a resource
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResponseGetMainImage.resource_id">
            <summary>
            Resource identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResponseGetMainImage.path">
            <summary>
            The image path
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResponseGetMainImage.sizes">
            <summary>
            All the posible sizes for the image
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.InsertAttributeParams">
            <summary>
            Parameters to insert attributes
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.InsertAttributeParams.graph">
            <summary>
            Graph Url
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.InsertAttributeParams.value">
            <summary>
            Value to insert
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.DeleteParams">
            <summary>
            Parameters to delete a resource
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.DeleteParams.resource_id">
            <summary>
            Resource identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.DeleteParams.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.DeleteParams.end_of_load">
            <summary>
            True if it's the end of the load
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.DeleteParams.charge_id">
            <summary>
            Load identifier
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.PersistentDeleteParams">
            <summary>
            Parameters to delete persistent a resource
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.PersistentDeleteParams.resource_id">
            <summary>
            Resource identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.PersistentDeleteParams.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.PersistentDeleteParams.end_of_load">
            <summary>
            True if it's the end of the load
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.PersistentDeleteParams.delete_attached">
            <summary>
            True if the resource attached file must be deleted
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ExistsUrlParams">
            <summary>
            Parameters to check if exists a url
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ExistsUrlParams.url">
            <summary>
            Url to check
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ExistsUrlParams.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ShareParams">
            <summary>
            Parameters to share a resource
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ShareParams.destination_communitiy_short_name">
            <summary>
            Community short name where the resource is going to be published
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ShareParams.resource_id">
            <summary>
            Resource identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ShareParams.categories">
            <summary>
            Categories of the destination community
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.SetMainImageParams">
            <summary>
            Parameters to set the main images
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.SetMainImageParams.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.SetMainImageParams.resource_id">
            <summary>
            Resource identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.SetMainImageParams.path">
            <summary>
            Path of the image
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.SetPublisherParams">
            <summary>
            Parameters to set the publisher of a resource
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.SetPublisherParams.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.SetPublisherParams.resource_id">
            <summary>
            Resource identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.SetPublisherParams.publisher_email">
            <summary>
            Email of the resource publisher
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.SetPublisherParams.resource_id_list">
            <summary>
            Resource identifier list
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.SetPublisherParams.keep_editors">
            <summary>
            True if the original editors must be keeped
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.CommentParams">
            <summary>
            Parameters for comments
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommentParams.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommentParams.resource_id">
            <summary>
            Resource identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommentParams.user_short_name">
            <summary>
            User short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommentParams.html_description">
            <summary>
            Description of the comment
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommentParams.parent_comment_id">
            <summary>
            Parent comment identifier (if the comment is an answer to another comment)
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommentParams.comment_date">
            <summary>
            Comment date
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommentParams.publish_home">
            <summary>
            True if the comment must be pusblished in the community home
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.LoadResourceParams">
            <summary>
            Parameters to upload a resource
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.LoadResourceParams.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.LoadResourceParams.resource_id">
            <summary>
            Resource identifier
            </summary>        
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.LoadResourceParams.title">
            <summary>
            Resource title
            </summary>        
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.LoadResourceParams.description">
            <summary>
            Resource description
            </summary>        
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.LoadResourceParams.tags">
            <summary>
            Resource tags
            </summary>        
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.LoadResourceParams.categories">
            <summary>
            Resource categories
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.LoadResourceParams.resource_type">
            <summary>
            Resource type
            </summary>        
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.LoadResourceParams.resource_url">
            <summary>
            Resource url
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.LoadResourceParams.resource_file">
            <summary>
            Resource attached file
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.LoadResourceParams.resource_attached_files">
            <summary>
            Resource attached files
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.LoadResourceParams.creator_is_author">
            <summary>
            True if the resource creator is the author
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.LoadResourceParams.authors">
            <summary>
            Resource authors (comma separated)
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.LoadResourceParams.auto_tags_title_text">
            <summary>
            Tags auto extracted of title
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.LoadResourceParams.auto_tags_description_text">
            <summary>
            Tags auto extracted of description
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.LoadResourceParams.create_screenshot">
            <summary>
            True if a screenshot of the resource must be generated
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.LoadResourceParams.url_screenshot">
            <summary>
            Url to make a screenshot
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.LoadResourceParams.predicate_screenshot">
            <summary>
            Screenshot predicate
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.LoadResourceParams.screenshot_sizes">
            <summary>
            Screenshot posible sizes
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.LoadResourceParams.priority">
            <summary>
            Priority of the upload
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.LoadResourceParams.visibility">
            <summary>
            Resource visibility <see cref="T:Gnoss.ApiWrapper.ApiModel.ResourceVisibility"/> enumeration
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.LoadResourceParams.readers_list">
            <summary>
            Resource readers list
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.LoadResourceParams.editors_list">
            <summary>
            Resource editors list
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.LoadResourceParams.creation_date">
            <summary>
            Resource creation date
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.LoadResourceParams.publisher_email">
            <summary>
            Resource publisher email
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.LoadResourceParams.publish_home">
            <summary>
            True if the resource must be published in the home of the community
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.LoadResourceParams.load_id">
            <summary>
            Load identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.LoadResourceParams.main_image">
            <summary>
            Path of the resource main image
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.LoadResourceParams.end_of_load">
            <summary>
            True if it's the end of the load
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.LoadResourceParams.create_version">
            <summary>
            True if the resource must be versioned
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.LoadResourceParams.canonical_url">
            <summary>
            The canonical url for the resource
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.Resource">
            <summary>
            Parameters to upload a resource
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.Resource.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.Resource.resource_id">
            <summary>
            Resource identifier
            </summary>        
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.Resource.title">
            <summary>
            Resource title
            </summary>        
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.Resource.description">
            <summary>
            Resource description
            </summary>        
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.Resource.tags">
            <summary>
            Resource tags
            </summary>        
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.Resource.categories">
            <summary>
            Resource categories
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.Resource.resource_type">
            <summary>
            Resource type
            </summary>        
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.Resource.resource_url">
            <summary>
            Resource url
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.Resource.resource_attached_files">
            <summary>
            Resource attached files
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.Resource.authors">
            <summary>
            Resource authors (comma separated)
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.Resource.url_screenshot">
            <summary>
            Url to make a screenshot
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.Resource.predicate_screenshot">
            <summary>
            Screenshot predicate
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.Resource.screenshot_sizes">
            <summary>
            Screenshot posible sizes
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.Resource.visibility">
            <summary>
            Resource visibility <see cref="T:Gnoss.ApiWrapper.ApiModel.ResourceVisibility"/> enumeration
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.Resource.ontology">
            <summary>
            Ontology
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.Resource.readers_list">
            <summary>
            Resource readers list
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.Resource.editors_list">
            <summary>
            Resource editors list
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.Resource.creation_date">
            <summary>
            Resource creation date
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.Resource.main_image">
            <summary>
            Path of the resource main image
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.SemanticAttachedResource">
            <summary>
            Represents a attached file to a complex ontology resource
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.SemanticAttachedResource.file_rdf_property">
            <summary>
            Property of the file
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.SemanticAttachedResource.file_property_type">
            <summary>
            Property type
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.SemanticAttachedResource.rdf_attached_file">
            <summary>
            Bytes of the attached file
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.SemanticAttachedResource.delete_file">
            <summary>
            True if the file must be deleted
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ModifyResourceTripleListParams">
            <summary>
            Parameters to modify a resource triple list
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ModifyResourceTripleListParams.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ModifyResourceTripleListParams.resource_id">
            <summary>
            Resource identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ModifyResourceTripleListParams.resource_triples">
            <summary>
            Triples to modify
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ModifyResourceTripleListParams.resource_attached_files">
            <summary>
            Attached files
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ModifyResourceTripleListParams.publish_home">
            <summary>
            True if the resource must be published in the home of the community
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ModifyResourceTripleListParams.charge_id">
            <summary>
            Load identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ModifyResourceTripleListParams.main_image">
            <summary>
            Resource main image
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ModifyResourceTripleListParams.end_of_load">
            <summary>
            True if it's the end of the load and must delete the cache
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ModifyResourceTriple">
            <summary>
            Parameters to modify a triple of a resource
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ModifyResourceTriple.predicate">
            <summary>
            Triple predicate
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ModifyResourceTriple.old_object">
            <summary>
            Old value of the object
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ModifyResourceTriple.new_object">
            <summary>
            New value of the object
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ModifyResourceTriple.gnoss_property">
            <summary>
            Complete when the predicate is the resource title or description 
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ModifyResourceProperty">
            <summary>
            Parameters to modify a resource property
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ModifyResourceProperty.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ModifyResourceProperty.resource_id">
            <summary>
            Resource identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ModifyResourceProperty.property">
            <summary>
            Property to modify
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ModifyResourceProperty.new_object">
            <summary>
            New value of the object
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ResourceNoveltiesModel">
            <summary>
            Properties of a resource
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceNoveltiesModel.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceNoveltiesModel.resource_id">
            <summary>
            Resource identificator
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceNoveltiesModel.title">
            <summary>
            Resource title
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceNoveltiesModel.description">
            <summary>
            Resource description
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceNoveltiesModel.tags">
            <summary>
            Resource tags
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceNoveltiesModel.categories">
            <summary>
            Resource categories
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceNoveltiesModel.resource_type">
            <summary>
            Resource type
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceNoveltiesModel.resource_type_names">
            <summary>
            Resource type names in different languages
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceNoveltiesModel.item_type_names">
            <summary>
            Item type names in different languages
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceNoveltiesModel.resource_url">
            <summary>
            Resource url
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceNoveltiesModel.authors">
            <summary>
            Resource authors (comma separated)
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceNoveltiesModel.visibility">
            <summary>
            Resource visibility <see cref="T:Gnoss.ApiWrapper.ApiModel.ResourceVisibility"/> enumeration
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceNoveltiesModel.readers_list">
            <summary>
            Resource readers list
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceNoveltiesModel.editors_list">
            <summary>
            Resource editors list
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceNoveltiesModel.creation_date">
            <summary>
            Resource creation date in ISO 8601 format
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceNoveltiesModel.last_edition_date">
            <summary>
            Resource last edition date in ISO 8601 format
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceNoveltiesModel.edition_date_by_user">
            <summary>
            Resource edition dates in ISO 8601 format by user. <see cref="T:Gnoss.ApiWrapper.ApiModel.ResourceEditionDateByUser"/>
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceNoveltiesModel.version_date_by_user">
            <summary>
            Resource version dates in ISO 8601 format by user. <see cref="T:Gnoss.ApiWrapper.ApiModel.ResourceVersionDateByUser"/>
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceNoveltiesModel.delete_date_by_user">
            <summary>
            Resource deleted date in ISO 8601 format by user. <see cref="T:Gnoss.ApiWrapper.ApiModel.ResourceDeleteDateByUser"/>
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceNoveltiesModel.main_image">
            <summary>
            Path of the resource main image
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceNoveltiesModel.comments">
            <summary>
            Resource version dates in ISO 8601 format by user. <see cref="T:Gnoss.ApiWrapper.ApiModel.ResourceVersionDateByUser"/>
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceNoveltiesModel.views">
            <summary>
            Resource number of views
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceNoveltiesModel.plays">
            <summary>
            Resource number of plays
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceNoveltiesModel.downloads">
            <summary>
            Resource number of downloads
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceNoveltiesModel.last_view_date">
            <summary>
            Resource last view date in ISO 8601 format
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceNoveltiesModel.votes">
            <summary>
            Resource votes. <see cref="T:Gnoss.ApiWrapper.ApiModel.VoteModel"/>
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceNoveltiesModel.shared_on">
            <summary>
            Resource sharing. <see cref="T:Gnoss.ApiWrapper.ApiModel.ShareModel"/>
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceNoveltiesModel.personal_spaces">
            <summary>
            Resource saved to user personal space. <see cref="T:Gnoss.ApiWrapper.ApiModel.PersonalSpaceModel"/>
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceNoveltiesModel.link">
            <summary>
            If the resource is a link to a web page, this property gets or sets the url of the web page
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ResourceTypeName">
            <summary>
            Define the name of the resource type in different languages
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceTypeName.resource_type_name">
            <summary>
            Resource type name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceTypeName.resource_type_name_language">
            <summary>
            Language of the type name
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ItemTypeName">
            <summary>
            Define the name of the resource type in different languages
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ItemTypeName.item_type_name">
            <summary>
            Resource type name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ItemTypeName.item_type_name_language">
            <summary>
            Language of the type name
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ResourceEditionDateByUser">
            <summary>
            Properties of the resource edition
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceEditionDateByUser.resource_id">
            <summary>
            Resource identificator
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceEditionDateByUser.edition_date">
            <summary>
            Resource edition date by user in ISO 8601 format
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceEditionDateByUser.user_id">
            <summary>
            User identificator who has edited the resource
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ResourceVersionDateByUser">
            <summary>
            Properties of the resource version
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceVersionDateByUser.resource_id">
            <summary>
            Resource identificator
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceVersionDateByUser.version_date">
            <summary>
            Resource version date by user in ISO 8601 format
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceVersionDateByUser.user_id">
            <summary>
            User identificator who has versioned the resource
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ResourceDeleteDateByUser">
            <summary>
            Properties of the resource deleted
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceDeleteDateByUser.resource_id">
            <summary>
            Resource identificator
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceDeleteDateByUser.delete_date">
            <summary>
            Resource deleted date by user in ISO 8601 format
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ResourceDeleteDateByUser.user_id">
            <summary>
            User identificator who has deleted the resource
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.CommentModel">
            <summary>
            Properties of a comment
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommentModel.community_short_name">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommentModel.resource_id">
            <summary>
            Resource identificator
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommentModel.user_id">
            <summary>
            User identificator who has commented the resource
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommentModel.html_description">
            <summary>
            Description of the comment
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommentModel.parent_comment_id">
            <summary>
            Parent comment identificator (if the comment is an answer to another comment)
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.CommentModel.comment_date">
            <summary>
            Comment creation date
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.VoteModel">
            <summary>
            Properties of a vote
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.VoteModel.resource_id">
            <summary>
            Resource identificator
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.VoteModel.user_id">
            <summary>
            User identificator who has voted the resource
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.VoteModel.vote_date">
            <summary>
            Vote date
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.ShareModel">
            <summary>
            Properties of sharing
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ShareModel.resource_id">
            <summary>
            Resource identificator
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ShareModel.origin_community_short_name">
            <summary>
            Origin community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ShareModel.destiny_community_short_name">
            <summary>
            Destiny community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ShareModel.user_id">
            <summary>
            User identificator who has shared the resource
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.ShareModel.share_date">
            <summary>
            Sharing date
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.ApiModel.PersonalSpaceModel">
            <summary>
            Properties of saving the resource at personal space
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.PersonalSpaceModel.resource_id">
            <summary>
            Resource identificator
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.PersonalSpaceModel.user_id">
            <summary>
            User identificator who has saved the resource in his personal space
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ApiModel.PersonalSpaceModel.saved_date">
            <summary>
            Saved in personal space date
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.CommunityApi">
            <summary>
            Wrapper for GNOSS community API
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.#ctor(Gnoss.ApiWrapper.OAuth.OAuthInfo,System.String)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.CommunityApi"/>
            </summary>
            <param name="communityShortName">Community short name which you want to use the API</param>
            <param name="oauth">OAuth information to sign the Api requests</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.#ctor(System.String)">
            <summary>
            Consturtor of <see cref="T:Gnoss.ApiWrapper.CommunityApi"/>
            </summary>
            <param name="configFilePath">Configuration file path, with a structure like http://api.gnoss.com/v3/exampleConfig.txt </param>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.LoadApi">
            <summary>
            Load the basic parameters for the API
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.CreateCommunity(System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Int16,System.Int16,System.String,System.Guid,System.String,System.Byte[])">
            <summary>
            Create a community
            </summary>
            <param name="communityName">Community name</param>
            <param name="communityShortName">Short name of the community</param>
            <param name="description">Description of the community</param>
            <param name="tagList">Tags of the community</param>
            <param name="type">Type of the community</param>
            <param name="accessType">Access type of the community</param>
            <param name="parentCommunityShortName">Parent community short name of the community</param>
            <param name="administratorUserId">Admin ID of the community</param>
            <param name="organizationShortName">Admin organization short name of the community</param>
            <param name="logo">Logo of the community</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.CreateCommunity(Gnoss.ApiWrapper.ApiModel.CommunityModel)">
            <summary>
            Create a community
            </summary>
            <param name="communityModel">Community model</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.CreateThesaurus(System.String)">
            <summary>
            Create a thesaurus for a community
            </summary>
            <param name="thesaurusXml">Thesaurus to create</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.OpenCommunity">
            <summary>
            Open an existing community
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.UploadConfiguration(System.String)">
            <summary>
            Upload the community settings
            </summary>
            <param name="settingsXml">Community settings in XML format</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.UploadCMSConfiguration(System.String)">
            <summary>
            Upload the cms community settings
            </summary>
            <param name="settingsCmsXml">Community CMS settings in XML format</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.AddMember(System.Guid,System.String,System.Int16)">
            <summary>
            Register a user in a community
            </summary>
            <param name="userId">User identifier that we will register in the community</param>
            <param name="organizationShortName">Short name of the user organization</param>
            <param name="identityType">Type of user identity in the community</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.DeleteMember(System.Guid)">
            <summary>
            Delete a user from a community
            </summary>
            <param name="userId">User identifier that we will delete from the community</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.AddMemberOrganizationGroupToCommunity(System.String,System.String,System.Int16)">
            <summary>
            Register the users of a organization group in a community 
            </summary>
            <param name="groupShortName">Short name of the group</param>
            <param name="organizationShortName">Short name of the user organization</param>
            <param name="identityType">Type of user identity in the community</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.DeleteMemberOrganizationGroupFromCommunity(System.String,System.String)">
            <summary>
            Delete the users of a organization group in a community
            </summary>
            <param name="groupShortName">Short name of the group</param>
            <param name="organizationShortName">Short name of the user organization</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.UpgradeMemberToAdministrator(System.Guid)">
            <summary>
            Upgrade a user changing is role to community administrator
            </summary>
            <param name="userId">User identifier that we will upgrade to community</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.UpgradeMembersOrganizationGroupToAdministrators(System.String,System.String)">
            <summary>
            Add the users of a organization group as administrator in a community
            </summary>
            <param name="groupShortName">Short name of the group</param>
            <param name="organizationShortName">Short name of the user organization</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.CreateCommunityGroup(System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Guid},System.Boolean)">
            <summary>
            Add a group to the community
            </summary>
            <param name="groupShortName">Short name of the group</param>
            <param name="groupName">Name of the group</param>
            <param name="description">Description of the group</param>
            <param name="tags">Tags of the group</param>
            <param name="members">List users that want to add</param>
            <param name="sendNotification">It indicates whether an email is going to be sent to users telling them that has been added to the group</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.DeleteCommunityGroup(System.String)">
            <summary>
            Delete a community group from the community
            </summary>
            <param name="groupShortName">Short name of the community group</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.AddMembersToGroup(System.String,System.Collections.Generic.List{System.Guid},System.Boolean)">
            <summary>
            Add a list of users to a community group
            </summary>
            <param name="groupShortName">Short name of the group</param>
            <param name="members">List users that want to add</param>
            <param name="sendNotification">It indicates whether a massage is going to be sent to users telling them has been added to the group</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.DeleteMembersFromGroup(System.String,System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete a list of users from a community group
            </summary>
            <param name="groupShortName">Short name of the group</param>
            <param name="members">List users that want to add</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.GetGroupMembers(System.String)">
            <summary>
            Gets the members of a community group 
            </summary>
            <param name="groupShortName">Short name of the group</param>
            <returns>List of members identifiers of the community group</returns> 
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.GetOrganizationGroupMembers(System.String,System.String)">
            <summary>
            Gets the members of a organization group 
            </summary>
            <param name="organizationShortName">Short name of the user organization</param>
            <param name="groupShortName">Short name of the group</param>
            <returns>List of members identifiers of the organization group</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.ExpelMember(System.Guid)">
            <summary>
            Expel a user from a community
            </summary>
            <param name="userId">User identifier to expel from the community</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.CloseCommunity">
            <summary>
            Close a community
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.ChangeCommunityName(System.String)">
            <summary>
            Change the community name
            </summary>
            <param name="newName">New community name</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.GetCommunityGroups">
            <summary>
            Gets a list with the groups of the community
            </summary>
            <returns>List with the groups of the community</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.GetOrganizationShortNameFromMember(System.String)">
            <summary>
            Gets the organization name of a user in a community
            </summary>
            <param name="userId">User identifier</param>
            <returns>Organization name of a user in a community</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.GetExtraRegisterData">
            <summary>
            Get the extra register data of a community
            </summary>
            <returns>List of ExtraRegisterData</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.GetCommunityMainLanguage">
            <summary>
            20141103
            Gets the community main language. Empty if it is not defined
            </summary>
            <returns>Community main language</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.GetCommunityPersonIDEmail">
            <summary>
            Get the person identifier and his email from the community members
            </summary>
            <returns>dictionary with the person identifier and his email</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.GetCommunityId(System.String)">
            <summary>
            Gets the community identifier
            </summary>
            <param name="communityShortName">Community short name</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.BlockMember(System.Guid,System.String)">
            <summary>
            Blocks a member in a community
            </summary>
            <param name="userId">User's identifier</param>
            <param name="communityShortName">Community short name</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.UnblockMember(System.Guid,System.String)">
            <summary>
            Unblocks a member in a community
            </summary>
            <param name="userId">User's identifier</param>
            <param name="communityShortName">Community short name</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.RefreshCMSComponent(System.Guid,System.String)">
            <summary>
            Refresh the caché of a CMS component
            </summary>
            <param name="componentId">Component id to refresh</param>
            <param name="communityShortName">Community short name</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.RefreshAllCMSComponents(System.String)">
            <summary>
            Refresh the caché of all community's CMS components
            </summary>
            <param name="communityShortName">Community short name</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.GetCommunityInfo(System.String)">
            <summary>
            Gets the basic information of a community
            </summary>
            <param name="communityShortName">Community short name</param>
            <returns></returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.GetCommunityInfo(System.Guid)">
            <summary>
            Gets the basic information of a community
            </summary>
            <param name="communityId">Community identifier</param>
            <returns></returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.CommunityApi.GetCategoryName(System.Guid)">
            <summary>
            Gets the name of a category in all of the languages that has been defined
            </summary>
            <param name="categoryId">Category identifier</param>
            <returns></returns>
        </member>
        <member name="P:Gnoss.ApiWrapper.CommunityApi.CommunityCategories">
            <summary>
            Gets the community categories
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Exceptions.GnossAPIArgumentException">
            <summary>
            Exception produced if there is invalid arguments
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Exceptions.GnossAPIArgumentException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Exceptions.GnossAPIArgumentException"/>
            </summary>
            <param name="message">Message of the error</param>
            <param name="paramName">Parameter with some error</param>
            <param name="originalException">Original exception</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Exceptions.GnossAPIArgumentException.#ctor(System.String,System.String)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Exceptions.GnossAPIArgumentException"/>
            </summary>
            <param name="message">Message of the error</param>
            <param name="paramName">Parameter with some error</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Exceptions.GnossAPIArgumentException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Exceptions.GnossAPIArgumentException"/>
            </summary>
            <param name="message">Message of the error</param>
            <param name="originalException">Original exception</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Exceptions.GnossAPIArgumentException.#ctor(System.String)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Exceptions.GnossAPIArgumentException"/>
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="T:Gnoss.ApiWrapper.Exceptions.GnossAPICategoryException">
            <summary>
            Exception produced if the resource categories not exists in the thesaurus of the community
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Exceptions.GnossAPICategoryException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Exceptions.GnossAPICategoryException"/>
            </summary>
            <param name="message">Message of the error</param>
            <param name="originalException">Original exception</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Exceptions.GnossAPICategoryException.#ctor(System.String)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Exceptions.GnossAPICategoryException"/>
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="T:Gnoss.ApiWrapper.Exceptions.GnossAPIException">
            <summary>
            Exceptions produced during the execution of the api
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Exceptions.GnossAPIException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Exceptions.GnossAPIException"/>
            </summary>
            <param name="message">Message of the error</param>
            <param name="paramName">Parameter with some error</param>
            <param name="originalException">Original exception</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Exceptions.GnossAPIException.#ctor(System.String,System.String)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Exceptions.GnossAPIException"/>
            </summary>
            <param name="message">Message of the error</param>
            <param name="paramName">Parameter with some error</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Exceptions.GnossAPIException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Exceptions.GnossAPIException"/>
            </summary>
            <param name="message">Message of the error</param>
            <param name="originalException">Original exception</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Exceptions.GnossAPIException.#ctor(System.String)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Exceptions.GnossAPIException"/>
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="T:Gnoss.ApiWrapper.Exceptions.GnossAPIDateException">
            <summary>
            Exception produced when there is problems converting dates. 
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Exceptions.GnossAPIDateException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Exceptions.GnossAPIDateException"/>
            </summary>
            <param name="message">Message of the error</param>
            <param name="originalException">Original exception</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Exceptions.GnossAPIDateException.#ctor(System.String)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Exceptions.GnossAPIDateException"/>
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="T:Gnoss.ApiWrapper.Log4csharpException">
            <summary>
            Exception produced by the logging class
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Log4csharpException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Log4csharpException"/>
            </summary>
            <param name="message">Message of the error</param>
            <param name="originalException">Original exception</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Log4csharpException.#ctor(System.String)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Log4csharpException"/>
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="T:Gnoss.ApiWrapper.GnossApiWrapper">
            <summary>
            Basic wrapper of GNOSS Api
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.GnossApiWrapper.executableLocation">
            <summary>
            The executable location
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.GnossApiWrapper.#ctor(Gnoss.ApiWrapper.OAuth.OAuthInfo,System.String)">
            <summary>
            Consturtor of <see cref="T:Gnoss.ApiWrapper.GnossApiWrapper"/>
            </summary>
            <param name="communityShortName">Community short name which you want to use the API</param>
            <param name="oauth">OAuth information to sign the Api requests</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.GnossApiWrapper.#ctor(System.String)">
            <summary>
            Consturtor of <see cref="T:Gnoss.ApiWrapper.GnossApiWrapper"/>
            </summary>
            <param name="configFilePath">Configuration file path, with a structure like http://api.gnoss.com/v3/exampleConfig.txt </param>
        </member>
        <member name="M:Gnoss.ApiWrapper.GnossApiWrapper.LoadApi">
            <summary>
            Load the basic parameters for the API
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.GnossApiWrapper.WebRequestPostWithJsonObject(System.String,System.Object,System.String)">
            <summary>
            Make a POST request to an url with an oauth sign and an object in the body of the request as json
            </summary>
            <param name="url">Url to make the request</param>
            <param name="model">Object to send in the body request as json</param>
            <param name="acceptHeader">(Optional) Accept header</param>
            <returns>Response of the server</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.GnossApiWrapper.WebRequest(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Request an url with an oauth sign
            </summary>
            <param name="httpMethod">Http method (GET, POST, PUT...)</param>
            <param name="url">Url to make the request</param>
            <param name="postData">(Optional) Post data to send in the body request</param>
            <param name="contentType">(Optional) Content type of the postData</param>
            <param name="acceptHeader">(Optional) Accept header</param>
            <returns>Response of the server</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.GnossApiWrapper.WebResponseGet(System.Net.HttpWebRequest)">
            <summary>
            Make a http get request
            </summary>
            <param name="pWebRequest">HttpWebRequest object</param>
            <returns>Server response</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.GnossApiWrapper.ReadConfigFile(System.Xml.XmlDocument)">
            <summary>
            Read the configuration from a configuration file
            </summary>
            <param name="docXml">XmlDocument with the configuration</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.GnossApiWrapper.ChangeChargeCommunityShortName(System.String)">
            <summary>
            Changes the current community short name by the indicated short name.
            </summary>
            <param name="newCommunityShortName">New community short name</param>
        </member>
        <member name="P:Gnoss.ApiWrapper.GnossApiWrapper.CommunityShortName">
            <summary>
            Community short name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.GnossApiWrapper.ApiUrl">
            <summary>
            Gets the API url
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.GnossApiWrapper.OAuthInstance">
            <summary>
            Gets or sets the oauth info
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Helpers.ILogHelper">
            <summary>
            Interface for log helper
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.ILogHelper.Trace(System.String,System.String,System.String)">
            <summary>
            Write a trace log message
            </summary>
            <param name="message">Message to write</param>
            <param name="className">(Optional) Class name who invokes this method</param>
            <param name="memberName">(Optional) Method name who infoes this</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.ILogHelper.Debug(System.String,System.String,System.String)">
            <summary>
            Write a debug log message
            </summary>
            <param name="message">Message to write</param>
            <param name="className">(Optional) Class name who invokes this method</param>
            <param name="memberName">(Optional) Method name who infoes this</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.ILogHelper.Info(System.String,System.String,System.String)">
            <summary>
            Write a information log message
            </summary>
            <param name="message">Message to write</param>
            <param name="className">(Optional) Class name who invokes this method</param>
            <param name="memberName">(Optional) Method name who infoes this</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.ILogHelper.Warn(System.String,System.String,System.String)">
            <summary>
            Write a warning log message
            </summary>
            <param name="message">Message to write</param>
            <param name="className">(Optional) Class name who invokes this method</param>
            <param name="memberName">(Optional) Method name who infoes this</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.ILogHelper.Error(System.String,System.String,System.String)">
            <summary>
            Write a error log message
            </summary>
            <param name="message">Message to write</param>
            <param name="className">(Optional) Class name who invokes this method</param>
            <param name="memberName">(Optional) Method name who infoes this</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.ILogHelper.Fatal(System.String,System.String,System.String)">
            <summary>
            Write a fatal log message
            </summary>
            <param name="message">Message to write</param>
            <param name="className">(Optional) Class name who invokes this method</param>
            <param name="memberName">(Optional) Method name who infoes this</param>
        </member>
        <member name="T:Gnoss.ApiWrapper.Helpers.LogApplicationInsightsHelper">
            <summary>
            Helper to save logs an traces
            
            The file generated will always have the creation date before the name. Example: 2015_05_17_error.log
            
            There are seven posible levels: <br />
             <br />   
                - <c>FATAL</c>: Critical system messages. The application must be aborted after a fatal error<br />
                - <c>ERROR</c>: Errors produced by the API or an unexpected API response<br />
                - <c>WARN</c>: Something goes wrong, but it's not too important<br />
                - <c>INFO</c>: Verbose mode. Information message about the application state<br />
                - <c>DEBUG</c>: Only for development enviroments. Generate message for every API comunication<br />
                - <c>TRACE</c>: Adds more message to DEBUG mode, with information about the request and response data<br />
                - <c>OFF</c>: Log disabled<br />
            <br />
            
            Class without constructor, following the singleton pattern. To use it, use the static property Instance. 
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.LogApplicationInsightsHelper.#ctor">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.LogApplicationInsightsHelper.Trace(System.String,System.String,System.String)">
            <summary>
            Write a trace log message
            </summary>
            <param name="message">Message to write</param>
            <param name="className">(Optional) Class name who invokes this method</param>
            <param name="memberName">(Optional) Method name who infoes this</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.LogApplicationInsightsHelper.Debug(System.String,System.String,System.String)">
            <summary>
            Write a debug log message
            </summary>
            <param name="message">Message to write</param>
            <param name="className">(Optional) Class name who invokes this method</param>
            <param name="memberName">(Optional) Method name who infoes this</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.LogApplicationInsightsHelper.Info(System.String,System.String,System.String)">
            <summary>
            Write a information log message
            </summary>
            <param name="message">Message to write</param>
            <param name="className">(Optional) Class name who invokes this method</param>
            <param name="memberName">(Optional) Method name who infoes this</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.LogApplicationInsightsHelper.Warn(System.String,System.String,System.String)">
            <summary>
            Write a warning log message
            </summary>
            <param name="message">Message to write</param>
            <param name="className">(Optional) Class name who invokes this method</param>
            <param name="memberName">(Optional) Method name who infoes this</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.LogApplicationInsightsHelper.Error(System.String,System.String,System.String)">
            <summary>
            Write a error log message
            </summary>
            <param name="message">Message to write</param>
            <param name="className">(Optional) Class name who invokes this method</param>
            <param name="memberName">(Optional) Method name who infoes this</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.LogApplicationInsightsHelper.Fatal(System.String,System.String,System.String)">
            <summary>
            Write a fatal log message
            </summary>
            <param name="message">Message to write</param>
            <param name="className">(Optional) Class name who invokes this method</param>
            <param name="memberName">(Optional) Method name who infoes this</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.LogApplicationInsightsHelper.SetLogLocation(System.Int32)">
            <summary>
            Set the log location
            </summary>
            <param name="pLocation"></param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.LogApplicationInsightsHelper.SetImplementationKey(System.String)">
            <summary>
            Set the application insights implementation key
            </summary>
            <param name="pImplementationKey"></param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.LogApplicationInsightsHelper.LeerConfiguracionApplicationInsights(System.String)">
            <summary>
            Obtains the Application Insights configuration
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.LogApplicationInsightsHelper.Write(Gnoss.ApiWrapper.Helpers.LogLevels,System.String,System.String,System.String,System.Int32)">
            <summary>
            Write a message in the log file
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Helpers.LogApplicationInsightsHelper.ImplementationKey">
            <summary>
            Get or set the ApplicationInsights ImplementationKey
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Helpers.LogApplicationInsightsHelper.LogLocation">
            <summary>
            Get or set the Logs location. Possible values: 
            0 (log file only), 1 (ApplicationInsights only), 2 (both, file and App. Insights log recorder)
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Helpers.LogLevels">
            <summary>
            Logs level
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.LogLevels.TRACE">
            <summary>
            Write all messages
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.LogLevels.DEBUG">
            <summary>
            Write fatal, error, warning, information and debug messages
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.LogLevels.INFO">
            <summary>
            Write fatal, error, warning and information messages
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.LogLevels.WARN">
            <summary>
            Write fatal, error and warning messages
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.LogLevels.ERROR">
            <summary>
            Only write fatal and error messages
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.LogLevels.FATAL">
            <summary>
            Only write fatal messages
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.LogLevels.OFF">
            <summary>
            No write any message
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Helpers.LogHelper">
            <summary>
            
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.LogHelper.instance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Helpers.LogHelper.Instance">
            <summary>
            Gets the ILogHelper instance
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Helpers.LogHelper.LogLevel">
            <summary>
            Gets or sets the log level
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Helpers.LogHelper.LogDirectory">
            <summary>
            Gets or sets the log directory
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Helpers.LogHelper.LogFileName">
            <summary>
            Get or set the log file name. (Default: gnoss_api.log)
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Helpers.LogHelperFile">
            <summary>
            Helper to save logs an traces
            
            The file generated will always have the creation date before the name. Example: 2015_05_17_error.log
            
            There are seven posible levels: <br />
             <br />   
                - <c>FATAL</c>: Critical system messages. The application must be aborted after a fatal error<br />
                - <c>ERROR</c>: Errors produced by the API or an unexpected API response<br />
                - <c>WARN</c>: Something goes wrong, but it's not too important<br />
                - <c>INFO</c>: Verbose mode. Information message about the application state<br />
                - <c>DEBUG</c>: Only for development enviroments. Generate message for every API comunication<br />
                - <c>TRACE</c>: Adds more message to DEBUG mode, with information about the request and response data<br />
                - <c>OFF</c>: Log disabled<br />
            <br />
            
            Class without constructor, following the singleton pattern. To use it, use the static property Instance. 
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.LogHelperFile.#ctor">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.LogHelperFile.Trace(System.String,System.String,System.String)">
            <summary>
            Write a trace log message
            </summary>
            <param name="message">Message to write</param>
            <param name="className">(Optional) Class name who invokes this method</param>
            <param name="memberName">(Optional) Method name who infoes this</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.LogHelperFile.Debug(System.String,System.String,System.String)">
            <summary>
            Write a debug log message
            </summary>
            <param name="message">Message to write</param>
            <param name="className">(Optional) Class name who invokes this method</param>
            <param name="memberName">(Optional) Method name who infoes this</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.LogHelperFile.Info(System.String,System.String,System.String)">
            <summary>
            Write a information log message
            </summary>
            <param name="message">Message to write</param>
            <param name="className">(Optional) Class name who invokes this method</param>
            <param name="memberName">(Optional) Method name who infoes this</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.LogHelperFile.Warn(System.String,System.String,System.String)">
            <summary>
            Write a warning log message
            </summary>
            <param name="message">Message to write</param>
            <param name="className">(Optional) Class name who invokes this method</param>
            <param name="memberName">(Optional) Method name who infoes this</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.LogHelperFile.Error(System.String,System.String,System.String)">
            <summary>
            Write a error log message
            </summary>
            <param name="message">Message to write</param>
            <param name="className">(Optional) Class name who invokes this method</param>
            <param name="memberName">(Optional) Method name who infoes this</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.LogHelperFile.Fatal(System.String,System.String,System.String)">
            <summary>
            Write a fatal log message
            </summary>
            <param name="message">Message to write</param>
            <param name="className">(Optional) Class name who invokes this method</param>
            <param name="memberName">(Optional) Method name who infoes this</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.LogHelperFile.Write(Gnoss.ApiWrapper.Helpers.LogLevels,System.String,System.String,System.String,System.Int32)">
            <summary>
            Write a message in the log file
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Helpers.Constants">
            <summary>
            Constants to use in GnossApiWrapper
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.Constants.MAXIMUM_WIDTH_GNOSS_IMAGE">
            <summary>
            Maximum width allows in GNOSS
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.Constants.IMAGES_PATH_ROOT">
            <summary>
            Root for the images path
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Helpers.ImageTransformationType">
            <summary>
            Enumeration with the posible transformation of an image
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.ImageTransformationType.ResizeToHeight">
            <summary>
            Resize keeping the aspect ratio to height
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.ImageTransformationType.ResizeToWidth">
            <summary>
            Resize keeping the aspect ratio to width
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.ImageTransformationType.Crop">
            <summary>
            Resize to the indicated size, crop the image and take the top of the image if it is vertical, or the central part if its horizontal
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.ImageTransformationType.ResizeToHeightAndWidth">
            <summary>
            Resize the image keeping the aspect ratio without exceeding the width or height indicated
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Helpers.AdministrationPageType">
            <summary>
            Indicates the administration page type
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.AdministrationPageType.Design">
            <summary>
            
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.AdministrationPageType.Page">
            <summary>
            
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.AdministrationPageType.Semantic">
            <summary>
            
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.AdministrationPageType.Thesaurus">
            <summary>
            
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.AdministrationPageType.Text">
            <summary>
            
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Helpers.DataTypes">
            <summary>
            Datatypes
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.DataTypes.ListString">
            <summary>
            ListString
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.DataTypes.String">
            <summary>
            String
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.DataTypes.Bool">
            <summary>
            Bool
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.DataTypes.OntologyPropertyImage">
            <summary>
            OntologyPropertyImage
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.DataTypes.OntologyPropertyListString">
            <summary>
            OntologyPropertyListString
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.DataTypes.OntologyPropertyString">
            <summary>
            OntologyPropertyString
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.DataTypes.OntologyPropertyDate">
            <summary>
            OntologyPropertyDate
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.DataTypes.OntologyPropertyBoolean">
            <summary>
            OntologyPropertyBoolean
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Helpers.ErrorText">
            <summary>
            Error texts from the API
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.ErrorText.Mapping">
            <summary>
            Mapping error
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.ErrorText.RequiredParameterConstructor">
            <summary>
            Required parameter for the constructor
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Helpers.DateAccurancy">
            <summary>
            Accurancy of a date
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.DateAccurancy.Exact">
            <summary>
            Exact accurancy
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.DateAccurancy.Approximate">
            <summary>
            Approximate accurancy
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.DateAccurancy.Doubtful">
            <summary>
            Doubtful accurancy. When you aren't sure about the date of an event
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Helpers.DateTypes">
            <summary>
            Datatypes for dates
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.DateTypes.AC">
            <summary>
            After Christ
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.DateTypes.DC">
            <summary>
            After Christ, spanish version
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.DateTypes.BP">
            <summary>
            Before Christ
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Helpers.Languages">
            <summary>
            Languages
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.Languages.Spanish">
            <summary>
            Spanish
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.Languages.English">
            <summary>
            English
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.Languages.French">
            <summary>
            French
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.Languages.Euskera">
            <summary>
            Euskera
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.Languages.Portuguese">
            <summary>
            Portuguese
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.Languages.Catalan">
            <summary>
            Catalán
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.Languages.Gallego">
            <summary>
            Gallego
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.Languages.German">
            <summary>
            German
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.Languages.Italian">
            <summary>
            Italian
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Helpers.CommunityType">
            <summary>
            Types of communities
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.CommunityType.OrganizationCommunity">
            <summary>
            Organization community
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.CommunityType.OnlineCommunity">
            <summary>
            Online community
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.CommunityType.Metacommunity">
            <summary>
            Metacommunity
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.CommunityType.University">
            <summary>
            University community
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.CommunityType.ExpandedEducation">
            <summary>
            Expanded education
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.CommunityType.Catalog">
            <summary>
            Catalog community
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.CommunityType.PrimaryEducation">
            <summary>
            Primary education
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.CommunityType.NoSocialCatalogWithAResourceType">
            <summary>
            Catalog community without members with one resource type
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.CommunityType.NoSocialCatalog">
            <summary>
            Catalog community without members
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Helpers.AccessType">
            <summary>
            Access type of a community
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.AccessType.Public">
            <summary>
            Public community
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.AccessType.Private">
            <summary>
            Private community
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.AccessType.Restricted">
            <summary>
            Restricted community
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.AccessType.Reserved">
            <summary>
            Reserved community
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Helpers.IdentityTypes">
            <summary>
            Identity types
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.IdentityTypes.Personal">
            <summary>
            Personal
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.IdentityTypes.PersonalProfessional">
            <summary>
            Personal professional
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.IdentityTypes.CorporateProfessional">
            <summary>
            Corporate professional
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.IdentityTypes.Organization">
            <summary>
            Organization
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Helpers.IdentityOrganizationTypes">
            <summary>
            Identity types for organizations
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.IdentityOrganizationTypes.PersonalProfessional">
            <summary>
            Personal professional
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.IdentityOrganizationTypes.CorporateProfessional">
            <summary>
            Corporate professional
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Helpers.CharArrayDelimiters">
            <summary>
            Delimiters as char[]
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.CharArrayDelimiters.Space">
            <summary>
            Space
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.CharArrayDelimiters.Slash">
            <summary>
            Slash (/)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.CharArrayDelimiters.Backslash">
            <summary>
            Backslash (\)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.CharArrayDelimiters.Pipe">
            <summary>
            Pipe (|)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.CharArrayDelimiters.Hypen">
            <summary>
            Hypen (-)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.CharArrayDelimiters.Underscore">
            <summary>
            Underscore (_)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.CharArrayDelimiters.Comma">
            <summary>
            Comma (,)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.CharArrayDelimiters.Colon">
            <summary>
            Colon (:)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.CharArrayDelimiters.Equal">
            <summary>
            Equal (=)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.CharArrayDelimiters.Point">
            <summary>
            Point (.)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.CharArrayDelimiters.Semicolon">
            <summary>
            Semicolon (;)
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Helpers.CharDelimiters">
            <summary>
            Delimiters as char
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.CharDelimiters.Space">
            <summary>
            Space
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.CharDelimiters.Slash">
            <summary>
            Slash (/)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.CharDelimiters.Backslash">
            <summary>
            Backslash (\)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.CharDelimiters.Pipe">
            <summary>
            Pipe (|)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.CharDelimiters.Hypen">
            <summary>
            Guión (-) 
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.CharDelimiters.Underscore">
            <summary>
            Underscore (_)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.CharDelimiters.Comma">
            <summary>
            Comma (,)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.CharDelimiters.Colon">
            <summary>
            Colon (:)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.CharDelimiters.Equal">
            <summary>
            Equal (=)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.CharDelimiters.Point">
            <summary>
            Point (.)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.CharDelimiters.Semicolon">
            <summary>
            Semicolon (;)
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Helpers.StringArrayDelimiters">
            <summary>
            Delimiters as string[]
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.StringArrayDelimiters.Space">
            <summary>
            Espacio
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.StringArrayDelimiters.Slash">
            <summary>
            Slash (/)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.StringArrayDelimiters.Backslash">
            <summary>
            Backslash (\)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.StringArrayDelimiters.Pipe">
            <summary>
            Pipe (|)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.StringArrayDelimiters.Hypen">
            <summary>
            Hypen (-)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.StringArrayDelimiters.Underscore">
            <summary>
            Underscore (_)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.StringArrayDelimiters.Comma">
            <summary>
            Comma (,)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.StringArrayDelimiters.ThreePipes">
            <summary>
            Three Pipes (|||)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.StringArrayDelimiters.Colon">
            <summary>
            Colon (:)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.StringArrayDelimiters.Equal">
            <summary>
            Equal (=)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.StringArrayDelimiters.Point">
            <summary>
            Point (.)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.StringArrayDelimiters.Semicolon">
            <summary>
            Semicolon (;)
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Helpers.StringDelimiters">
            <summary>
            Delimiters as string
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.StringDelimiters.Space">
            <summary>
            Space
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.StringDelimiters.Slash">
            <summary>
            Slash (/)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.StringDelimiters.Backslash">
            <summary>
            Backslash (\)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.StringDelimiters.Pipe">
            <summary>
            Pipe (|)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.StringDelimiters.Hypen">
            <summary>
            Hypen (-)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.StringDelimiters.Underscore">
            <summary>
            Underscore (_)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.StringDelimiters.Comma">
            <summary>
            Comma (,)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.StringDelimiters.ThreePipes">
            <summary>
            Three Pipes (|||)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.StringDelimiters.Colon">
            <summary>
            Colon (:)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.StringDelimiters.Semicolon">
            <summary>
            Semicolon (:)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.StringDelimiters.Equal">
            <summary>
            Equal (=)
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.Helpers.StringDelimiters.Point">
            <summary>
            Point (.)
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Helpers.RDFHelper">
            <summary>
            Utilities to use RDF 
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.RDFHelper.getElementValue(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.String,System.String,System.Xml.Linq.XName,System.String)">
            <summary>
            Returns a string with the value of the label localName in xelm
            </summary>
            <param name="xelt">RDF elements</param>
            <param name="localName">Label to get the value</param>
            <param name="nameSpaceName">(optional) the namespace of the label, if necesary</param>
            <param name="filterAttribute">(optional) XName of the attribute to filter by<example>For the attribute xml:lang, XName.Get("{http://www.w3.org/XML/1998/namespace}lang")</example></param>
            <param name="filterAttributeValue">(optional) Value of the filterAttribute</param>
            <returns>The value of the label localName</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.RDFHelper.getAttributeValue(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            Returns a string with the value of the label localName in xelm
            </summary>
            <param name="elto">RDF element</param>
            <param name="localName">Label to get the value</param>
            <param name="nameSpaceName">(optional) the namespace of the label, if necesary</param>
            <returns></returns>
        </member>
        <member name="T:Gnoss.ApiWrapper.Helpers.StringHelper">
            <summary>
            Utilities to use strings
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.StringHelper.RemoveReserverCharactersForUrl(System.String)">
            <summary>
            Remove reserved caracters for urls in a string
            </summary>
            <param name="inputString">String to remove reserved characters</param>
            <returns>The inputString without reserved characters</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.StringHelper.RemoveAccentsWithRegEx(System.String)">
            <summary>
            Remove accents from the input string
            </summary>
            <param name="pInputString">String to remove accents</param>
            <returns>InputString without accents</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.StringHelper.UrlEncoderUTF8(System.String)">
            <summary>
            Gets a url encoded as UTF-8
            </summary>
            <param name="url">Url to encode</param>
            <returns></returns>
        </member>
        <member name="T:Gnoss.ApiWrapper.Helpers.GnossHelper">
            <summary>
            Helper for GNOSS utilities
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.GnossHelper.GetImagePath(System.Guid,System.String)">
            <summary>
            Gets the relative path of a image 
            </summary>
            <param name="resourceID">Identifier of the document</param>
            <param name="imageName">Name of the image</param>
            <returns></returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.GnossHelper.GetResourceID(System.String)">
            <summary>
            Gets the short id of a large id
            </summary>
            <param name="largeID">Large id of a resource (ej: http://gnoss.com/items/article_591df24d-4161-4fc0-933a-00fa0e91503c_5653cca6-b987-45ae-a33c-911c87aef051</param>
            <returns></returns>
        </member>
        <member name="T:Gnoss.ApiWrapper.Helpers.ImageHelper">
            <summary>
            Utilities to use images
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.ImageHelper.ResizeImageToWidth(System.Drawing.Bitmap,System.Single)">
            <summary>
            Resize keeping the aspect ratio to width
            </summary>
            <param name="image">Image to resize</param>
            <param name="widthInPixels">Width to resize</param>
            <returns>New image with width = <paramref name="widthInPixels"/></returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.ImageHelper.ResizeImageToHeightAndWidth(System.Drawing.Bitmap,System.Single,System.Single)">
            <summary>
            Resize the image keeping the aspect ratio without exceeding the width or height indicated
            </summary>
            <param name="image">Image to resize</param>
            <param name="widthInPixels" >Width to resize</param>
            <param name="heightInPixels">Height to resize</param>
            <returns>New image with width = <paramref name="widthInPixels"/> and height = <paramref name="heightInPixels"/></returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.ImageHelper.ResizeImageToHeight(System.Drawing.Bitmap,System.Single)">
            <summary>
            Resize keeping the aspect ratio to height
            </summary>
            <param name="image">Image to resize</param>
            <param name="heightInPixels">Height to resize</param>
            <returns>New image with height = <paramref name="heightInPixels"/></returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.ImageHelper.CropImageToSquare(System.Drawing.Bitmap,System.Single)">
            <summary>
            Resize to the indicated size, crop the image and take the top of the image if it is vertical, or the central part if its horizontal
            </summary>
            <param name="image">Image</param>
            <param name="squareSize">Size in pixels of the width and height of the result image</param>
            <returns>Square image</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.ImageHelper.BitmapToByteArray(System.Drawing.Bitmap)">
            <summary>
            Converts Bitmap to byte[]
            </summary>
            <param name="bitmap">Bitmap to convert to byte[]</param>
            <returns>byte[] converted from <paramref name="bitmap"/></returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.ImageHelper.BitmapToByteArray(System.Drawing.Bitmap,System.Int64)">
            <summary>
            Converts Bitmap to byte[], with a minimum quality
            </summary>
            <param name="bitmap">Bitmap to convert to byte[]</param>
            <param name="quality">Minimum quality for the converted image</param>
            <returns>byte[] converted from <paramref name="bitmap"/></returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.ImageHelper.DownloadImageFromUrl(System.String)">
            <summary>
            Download a image from a url
            </summary>
            <param name="imageUrl">Url of the image</param>
            <returns>Image</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.ImageHelper.GetEncoder(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Gets a specific encoder
            </summary>
            <param name="format">Format of the encoder</param>
            <returns>Encoder</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.ImageHelper.ByteArrayToBitmap(System.Byte[])">
            <summary>
            Converts ByteArray to bitmap
            </summary>
            <param name="byteArray">Bytearray of the image</param>
            <returns>Image</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.Helpers.ImageHelper.ReadImageFromUrlOrLocalPath(System.String)">
            <summary>
            Download a image from a url or a local path
            </summary>
            <param name="imageUrlOrPath">Url or local path of the image</param>
            <returns>Image</returns>
        </member>
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Gnoss.ApiWrapper.Helpers.ImageHelper.AssignEXIFPropertyColorSpaceSRGB(System.Drawing.Bitmap)" -->
        <member name="M:Gnoss.ApiWrapper.Helpers.ImageHelper.SetProperty(System.Drawing.Imaging.PropertyItem@,System.Int32,System.String)">
            <summary>
            Method of writing image Exif tags.
            </summary>
            <param name="prop">Image property list</param>
            <param name="iId">Property ID</param>
            <param name="sTxt">Property value</param>
        </member>
        <member name="T:Gnoss.ApiWrapper.NotificationApi">
            <summary>
            Wrapper for GNOSS notification API
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.NotificationApi.#ctor(Gnoss.ApiWrapper.OAuth.OAuthInfo)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.NotificationApi"/>
            </summary>
            <param name="oauth">OAuth information to sign the Api requests</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.NotificationApi.#ctor(System.String)">
            <summary>
            Consturtor of <see cref="T:Gnoss.ApiWrapper.NotificationApi"/>
            </summary>
            <param name="configFilePath">Configuration file path, with a structure like http://api.gnoss.com/v3/exampleConfig.txt </param>
        </member>
        <member name="M:Gnoss.ApiWrapper.NotificationApi.SendEmail(System.String,System.String,System.Collections.Generic.List{System.String},System.Boolean,System.String)">
            <summary>
            Send an e-mail notification
            </summary>
            <param name="subject">Subject of the notification</param>
            <param name="message">Message of the notification</param>
            <param name="isHTML">It indicates whether the content is html</param>
            <param name="receivers">Receivers of the notification</param>
            <param name="senderMask">Mask sender of the notification</param>
        </member>
        <member name="T:Gnoss.ApiWrapper.ThesaurusApi">
            <summary>
            Wrapper for GNOSS thsaurus API
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.ThesaurusApi.#ctor(Gnoss.ApiWrapper.OAuth.OAuthInfo,System.String)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.ThesaurusApi"/>
            </summary>
            <param name="communityShortName">Community short name which you want to use the API</param>
            <param name="oauth">OAuth information to sign the Api requests</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ThesaurusApi.#ctor(System.String)">
            <summary>
            Consturtor of <see cref="T:Gnoss.ApiWrapper.ThesaurusApi"/>
            </summary>
            <param name="configFilePath">Configuration file path, with a structure like http://api.gnoss.com/v3/exampleConfig.txt </param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ThesaurusApi.GetThesaurus(System.String,System.String)">
            <summary>
            Get the RDF of a semantic thesaurus
            </summary>
            <param name="thesaurusOntologyUrl">Ontology URL of the thesaurus</param>
            <param name="source">Identifier of the thesaurus</param>
            <returns>RDF of a semantic thesaurus</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ThesaurusApi.MoveSemanticThesaurusNode(System.String,System.String,System.String,System.String[])">
            <summary>
            Moves a category of a semantic thesaurus from its current father to another one, indicating its full path from the root.
            </summary>
            <param name="pUrlOntologiaTesauro">URL of the semantic thesaurus ontology</param>
            <param name="pUrlOntologiaRecursos">URL of the ontology of the resources that are linked to the semantic thesaurus</param>
            <param name="pCategoriaAMoverId">URI of the category to move</param>
            <param name="pPath">Path from the root to the last new father of the category</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ThesaurusApi.RemoveSemanticThesaurusNode(System.String,System.String,System.String,System.String[])">
            <summary>
            Removes a category of a semantic thesaurus moving all resources that were linked to it to another one indicating its complete path from the root.
            </summary>
            <param name="pUrlOntologiaTesauro">URL of the semantic thesaurus ontology</param>
            <param name="pUrlOntologiaRecursos">URL of the ontology of the resources that are linked to the semantic thesaurus</param>
            <param name="pCategoriaAEliminarId">URI of the category to remove</param>
            <param name="pPath">Path from the root father to its last child where resources of the removed category are going to be moved to</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ThesaurusApi.AddFatherToSemanticThesaurusNode(System.String,System.String,System.String)">
            <summary>
            Adds a category as a parent of another one.
            </summary>
            <param name="pUrlOntologiaTesauro">URL of the semantic thesaurus ontology</param>
            <param name="pCategoriaPadreId">URI of the parent category</param>
            <param name="pCategoriaHijoId">URI of the child category</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ThesaurusApi.ChangeNameToSemanticThesaurusNode(System.String,System.String,System.String)">
            <summary>
            Modifies the semantic thesaurus category name
            </summary>
            <param name="pUrlOntologiaTesauro">URL of the semantic thesaurus ontology</param>
            <param name="pCategoriaId">URI of the category</param>
            <param name="pNombre">Category name, supports multi language with the format: nombre@es|||name@en|||</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ThesaurusApi.InsertSemanticThesaurusNode(System.String,System.Byte[])">
            <summary>
            Inserts a category of a semantic thesaurus.
            </summary>
            <param name="pUrlOntologiaTesauro">URL of the semantic thesaurus ontology</param>
            <param name="pRdfCategoria">Inserted category Rdf</param>
        </member>
        <member name="T:Gnoss.ApiWrapper.UserApi">
            <summary>
            Wrapper for GNOSS user API
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.UserApi.#ctor(Gnoss.ApiWrapper.OAuth.OAuthInfo,System.String)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.UserApi"/>
            </summary>
            <param name="communityShortName">Community short name which you want to use the API</param>
            <param name="oauth">OAuth information to sign the Api requests</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.UserApi.#ctor(System.String)">
            <summary>
            Consturtor of <see cref="T:Gnoss.ApiWrapper.UserApi"/>
            </summary>
            <param name="configFilePath">Configuration file path, with a structure like http://api.gnoss.com/v3/exampleConfig.txt </param>
        </member>
        <member name="M:Gnoss.ApiWrapper.UserApi.GetUserByShortName(System.String)">
            <summary>
            Get the data a user by user short name
            </summary>
            <param name="userShortName">User short name you want to get data</param>
            <returns>User data that has been requested</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.UserApi.GetUserById(System.Guid)">
            <summary>
            Get the data a user by user identifier
            </summary>
            <param name="userId">User identifier you want to get data</param>
            <returns>User data that has been requested</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.UserApi.GetUserByEmail(System.String)">
            <summary>
            Get the data a user by user email
            </summary>
            <param name="email">User email you want to get data</param>
            <returns>User data that has been requested</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.UserApi.ValidatePassword(System.String,System.String)">
            <summary>
            Validate the user password
            </summary>
            <param name="user">User email</param>
            <param name="password">password</param>
            <returns>True if it's a valid password</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.UserApi.GetProfileRoleInOrganization(System.Guid)">
            <summary>
            Gets the position of an organization profile in a community
            </summary>
            <param name="profileId">Organization profile ID</param>
            <returns>Position of the organization profile in a community</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.UserApi.CreateUserWaitingForActivate(Gnoss.ApiWrapper.ApiModel.User)">
            <summary>
            Create a user awaiting activation
            </summary>
            <param name="user">User data you want to create</param>
            <returns>User data</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.UserApi.CreateUser(Gnoss.ApiWrapper.ApiModel.User)">
            <summary>
            Create a user
            </summary>
            <param name="user">User data you want to create</param>
            <returns>User data</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.UserApi.GenerateForgottenPasswordUrl(System.String)">
            <summary>
            Gets the URL to recover the password of a user
            </summary>
            <param name="loginOrEmail">Login o email of the user</param>
            <returns>URL to recover the password of a user</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.UserApi.ModifyUser(Gnoss.ApiWrapper.ApiModel.User)">
            <summary>
            Modify a user
            </summary>
            <param name="user">User data</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.UserApi.DeleteUserFromCommunity(System.String)">
            <summary>
            Delete a user from a community
            </summary>
            <param name="userShortName">User short name to delete</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.UserApi.DeleteUser(System.Guid)">
            <summary>
            Delete a user
            </summary>
            <param name="userId">User identifier to delete</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.UserApi.AddUserToOrganization(System.Guid,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Add a user to an organization
            </summary>
            <param name="userId">User ID to delete</param>
            <param name="organizationShortName">Short name of the organization</param>
            <param name="position">Position in the organization</param>
            <param name="communitiesShortNames">Short names of the communities that will be included</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.UserApi.AddUserToOrganizationGroup(System.Guid,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Add a user to organization groups
            </summary>
            <param name="userId">User ID </param>
            <param name="organizationShortName">Short name of the organization</param>
            <param name="groupsShortNames">Short names of the organization groups that will be included</param>
            <returns></returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.UserApi.GetModifiedUsersFromDate(System.String,System.String)">
            <summary>
            Gets the modified users from a datetime in a community
            </summary>
            <param name="communityShortName">Community short name</param>
            <param name="searchDate">Start search datetime in ISO8601 format string ("yyyy-MM-ddTHH:mm:ss.mmm" (no spaces) OR "yyyy-MM-ddTHH:mm:ss.mmmZ" (no spaces))</param>
            <returns>List with the modified users identifiers</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.UserApi.GetUserNoveltiesFromDate(System.Guid,System.String,System.String)">
            <summary>
            Gets the novelties of the user from a datetime
            </summary>
            <param name="userId">User identifier</param>
            <param name="communityShortName">Community short name</param>
            <param name="searchDate">Start search datetime in ISO8601 format string ("yyyy-MM-ddTHH:mm:ss.mmm" (no spaces) OR "yyyy-MM-ddTHH:mm:ss.mmmZ" (no spaces))</param>
            <returns>UserNoveltiesModel with the novelties of the user from the search date</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.UserApi.GetLoginTokenForEmail(System.String)">
            <summary>
            Gets a single use token to use it in a login action. 
            To login a user, the user must be redirected to the Login service URL, at the page externallogin.aspx
            with the parameters ?loginToken={thistoken}, webToken={webToken}, redirect={urlRedirect}
            The webToken can be accessed by @Session["tokenCookie"] in the views. 
            </summary>
            <param name="email">User's email</param>
            <returns>Token</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.UserApi.BlockUser(System.Guid)">
            <summary>
            Blocks a user
            </summary>
            <param name="userId">User's identifier</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.UserApi.UnblockUser(System.Guid)">
            <summary>
            Unblocks a user
            </summary>
            <param name="userId">User's identifier</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.UserApi.AddSocialNetworkLogin(System.Guid,System.String,System.String)">
            <summary>
            Adds a social network login to a user
            </summary>
            <param name="userId">User identifier</param>
            <param name="socialNetworkUserId">Social network user's identifier</param>
            <param name="socialNetwork">Social network (Facebook, twitter, instagram...)</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.UserApi.ModifySocialNetworkLogin(System.Guid,System.String,System.String)">
            <summary>
            Modifies a social network login to a user
            </summary>
            <param name="userId">User identifier</param>
            <param name="socialNetworkUserId">Social network user's identifier</param>
            <param name="socialNetwork">Social network (Facebook, twitter, instagram...)</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.UserApi.GetUserBySocialNetworkLogin(System.String,System.String)">
            <summary>
            Gets a user by a social network login
            </summary>
            <param name="socialNetworkUserId">Social network user's identifier</param>
            <param name="socialNetwork">Social network (Facebook, twitter, instagram...)</param>
            <returns></returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.UserApi.GetGroupsPerCommunity(System.Guid,System.String)">
            <summary>
            Gets the user's groups in a community
            </summary>
            <param name="userId">User identifier</param>
            <param name="communityShortName">Community short name</param>
            <returns></returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.UserApi.GetSocialNetworkLoginByUserId(System.String,System.Guid)">
            <summary>
            Gets a social network login by a user id
            </summary>
            <param name="userId">User identifier</param>
            <param name="socialNetwork">Social network short name</param>
            <returns>Social network login of the user</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.UserApi.AddCmsAdminRolToUser(System.Guid,System.String)">
            <summary>
            Adds the Community CMS Admin rol to a user
            </summary>
            <param name="userId">User identifier</param>
            <param name="communityShortName">Community short name</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.UserApi.RemoveCmsAdminRolToUser(System.Guid,System.String)">
            <summary>
            Removes the Community CMS Admin rol to a user
            </summary>
            <param name="userId">User identifier</param>
            <param name="communityShortName">Community short name</param>
        </member>
        <member name="T:Gnoss.ApiWrapper.Web.GnossWebClient">
            <summary>
            Gnoss Web client to override the default behaviour of autoredirect property
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Web.GnossWebClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Web.GnossWebClient.#ctor(System.Boolean)">
            <summary>
            Constructor with autoredirect option
            </summary>
            <param name="pAutoRedirect">Set the autoredirect property</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Web.GnossWebClient.GetWebRequest(System.Uri)">
            <summary>
            Gets a web request
            </summary>
            <param name="address">Uri address to request</param>
            <returns>WebRequest</returns>
        </member>
        <member name="P:Gnoss.ApiWrapper.Web.GnossWebClient.AutoRedirect">
            <summary>
            Sets the behaviour for autoredirect
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Model.ImageAction">
            <summary>
             Represents a transformation to do over an image
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.ImageAction.#ctor(System.Int32,Gnoss.ApiWrapper.Helpers.ImageTransformationType,System.Boolean)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Model.ImageAction"></see>
            </summary>
            <param name="size">Size in pixels of the width and height of the result image</param>
            <param name="imageTransformationType">Transformation to apply to the image</param>
            <param name="embedsRGB">Embed color space</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.ImageAction.#ctor(System.Int32,Gnoss.ApiWrapper.Helpers.ImageTransformationType,System.Int64,System.Boolean)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Model.ImageAction"></see>
            </summary>
            <param name="size">Size in pixels of the width and height of the result image</param>
            <param name="imageTransformationType">Transformation to apply to the image</param>
            <param name="imageQualityPercentage">Minimum quality for the converted image (between 0 and 100)</param>
            <param name="embedsRGB">Embed color space</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.ImageAction.#ctor(System.Single,System.Single,Gnoss.ApiWrapper.Helpers.ImageTransformationType,System.Boolean)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Model.ImageAction"></see>
            </summary>
            <param name="width">Width to resize</param>
            <param name="height">Height to resize</param>
            <param name="imageTransformationType">Transformation to apply to the image</param>
            <param name="embedsRGB">Embed color space</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.ImageAction.#ctor(System.Single,System.Single,Gnoss.ApiWrapper.Helpers.ImageTransformationType,System.Int64,System.Boolean)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Model.ImageAction"></see>
            </summary>
            <param name="width">Width to resize</param>
            <param name="height">Height to resize</param>
            <param name="imageTransformationType">Transformation to apply to the image</param>
            <param name="imageQualityPercentage">Minimum quality for the converted image (between 0 and 100)</param>
            <param name="embedsRGB">Embed color space</param>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.ImageAction.Size">
            <summary>
            Gets or sets the size in pixels of the width and height of the result image
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.ImageAction.Height">
            <summary>
            Height, in pixels, that must have the image after the transformation
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.ImageAction.Width">
            <summary>
            Width, in pixels, that must have the image after the transformation
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.ImageAction.ImageTransformationType">
            <summary>
            Transformation to apply to the image
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.ImageAction.ImageQualityPercentage">
            <summary>
            Minimum quality for the converted image (between 0 and 100)
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.ImageAction.EmbedsRGB">
            <summary>
            Embed color space
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Model.RemoveTriples">
            <summary>
            Class to remove triples from resources
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.RemoveTriples.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.RemoveTriples.#ctor(System.String,System.String)">
            <summary>
            Remove the triples from a resource without attached files
            </summary>
            <param name="value">Current value of the property to delete</param>
            <param name="predicate">Predicate of the property to delete. If it's a property of an auxiliary entity, the correct syntax is firstLevelPredicate|secondLevelPredicate</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.RemoveTriples.#ctor(System.String,System.String,System.Int16)">
            <summary>
            Remove the triples from a resource with attached files
            </summary>
            <param name="value">Current value of the property to delete</param>
            <param name="predicate">Predicate of the property to delete. If it's a property of an auxiliary entity, the correct syntax is firstLevelPredicate|secondLevelPredicate</param>
            <param name="objectType">Objet type. It can be image or attached file</param>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.RemoveTriples.Value">
            <summary>
            Gets or sets the current value of the property to delete
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.RemoveTriples.Predicate">
            <summary>
            Gets or sets the predicate of the property to delete. If it's a property of an auxiliary entity, the correct syntax is firstLevelPredicate|secondLevelPredicate
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.RemoveTriples.ObjectType">
            <summary>
            Gets or sets the resource object type
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.RemoveTriples.Title">
            <summary>
            Gets or sets the resource title
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.RemoveTriples.Description">
            <summary>
            Gets or sets the resource description
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Model.OntologyEntity">
            <summary>
            Represents an auxiliary entity
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.OntologyEntity.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Model.OntologyEntity"/>
            </summary>
            <param name="rdfType">rdf:type of the auxiliary entity</param>
            <param name="rdfsLabel">rdfs:label of the auxiliary entity</param>
            <param name="label">Predicate that contains a reference to the auxiliary entity</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.OntologyEntity.#ctor(System.String,System.String,System.String,System.Collections.Generic.List{Gnoss.ApiWrapper.Model.OntologyProperty},System.Collections.Generic.List{Gnoss.ApiWrapper.Model.OntologyEntity})">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Model.OntologyEntity"/>
            </summary>
            <param name="rdfType">rdf:type of the auxiliary entity</param>
            <param name="rdfsLabel">rdfs:label of the auxiliary entity</param>
            <param name="label">Predicate that contains a reference to the auxiliary entity</param>
            <param name="properties">Properties of the entity</param>
            <param name="entities">(Optional) Auxiliary entity list of the entity</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.OntologyEntity.HasAnyPropertyWithData">
            <summary>
            Validate if the properties of the entity has any property with no empty data
            </summary>
            <returns><c>true</c> if the entity has any property with no empty data or <c>false</c> if the entity has eny property with empty or null data</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.OntologyEntity.HasRdfTypeDefined">
            <summary>
            Validates if the auxiliary entity has <c>rdf:type</c> defined
            </summary>
            <returns><c>true</c> if <see cref="T:Gnoss.ApiWrapper.Model.SecondaryEntity"/> has defined the property <c>rdf:type</c>. <c>false</c> in another case</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.OntologyEntity.HasRdfsLabelDefined">
            <summary>
            Validates if the auxiliary entity has <c>rdfs:label</c> defined
            </summary>
            <returns><c>true</c> if <see cref="T:Gnoss.ApiWrapper.Model.SecondaryEntity"/> has defined the property <c>rdfs:label</c>. <c>false</c> in another case</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.OntologyEntity.HasRDFTypeAndRDFLabelDefined">
            <summary>
            Validates if the auxiliary entity has <c>rdf:type</c> and <c>rdfs:label</c> defined
            </summary>
            <returns><c>true</c> if <see cref="T:Gnoss.ApiWrapper.Model.OntologyEntity"/> has defined the properties <c>rdf:type</c> and <c>rdfs:label</c>. <c>false</c> in another case</returns>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.OntologyEntity.RdfType">
            <summary>
            Gets or sets the rdf:type property
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.OntologyEntity.RdfsLabel">
            <summary>
            Gets or sets the rdfs:label property
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.OntologyEntity.Properties">
            <summary>
            Gets or sets the properties of the entity
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.OntologyEntity.Entities">
            <summary>
            Gets or sets the entity list that <see cref="T:Gnoss.ApiWrapper.Model.OntologyEntity"/> contains
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.OntologyEntity.Label">
            <summary>
            Gets or sets the predicate that contains a reference to the auxiliary entity
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.OntologyEntity.Items">
            <summary>
            Gets the part of the identifier of the auxiliary entity
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.OntologyEntity.GuidEntidad">
            <summary>
            Gets the entity identifier
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Model.ConceptEntity">
            <summary>
            Represents a secondary entity of the ontology taxonomy.owl
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.ConceptEntity.#ctor(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{Gnoss.ApiWrapper.Model.ConceptEntity},System.String,System.String,System.Int32)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Model.ConceptEntity"/>.
            </summary>
            <param name="identifierNameRoot">Identifier name of the <see cref="T:Gnoss.ApiWrapper.Model.ConceptEntity"/></param>
            <param name="identifier">Identifier of the entity that will be concatenated to tha name</param>
            <param name="dcSource"><c>dc:source</c></param>
            <param name="prefLabelDictionary">Dictionary of prefLabel</param>
            <param name="subentities">Subentities of this entity</param>
            <param name="parentIdentifier">Identifier of the parent</param>
            <param name="level">Level of this entity (0 for the roots elements, 1 for the child...)</param>
            <param name="GraphsUrl">The base url of the graphs. (example: http://gnoss.com/) </param>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.ConceptEntity.Level">
            <summary>
            Gets the hierarchy level of the entity
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.ConceptEntity.ParentGnossId">
            <summary>
            Gets the identifier URI of the parent (if exists)
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.ConceptEntity.ConceptEntityGnossId">
            <summary>
            Gets the identifier of the concept entity
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.ConceptEntity.GraphsUrl">
            <summary>
            Gets or sets the base url of the graphs. (example: http://gnoss.com/)
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.ConceptEntity.ParentIdentifier">
            <summary>
            Gets or sets the identifier of the parent
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.ConceptEntity.Subentities">
            <summary>
            Subentities of this entity
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.ConceptEntity.Identifier">
            <summary>
            Gets the identifier of this entity
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Model.SecondaryEntity">
            <summary>
            Represents a secondary entity
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.SecondaryEntity.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Model.SecondaryEntity"/>
            </summary>
            <param name="rdfType">rdf:type of the secondary entity</param>
            <param name="rdfsLabel">rdfs:label of the secondary entity</param>
            <param name="label">Predicate that contains a reference to the auxiliary entity</param>
            <param name="identifier">The identifier of the secondary entity. If the identifier is an URI, the identifier would be the last part of the URI after the last slash (/)</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.SecondaryEntity.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.List{Gnoss.ApiWrapper.Model.OntologyProperty})">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Model.SecondaryEntity"/>
            </summary>
            <param name="rdfType">rdf:type of the secondary entity</param>
            <param name="rdfsLabel">rdfs:label of the secondary entity</param>
            <param name="label">Predicate that contains a reference to the auxiliary entity</param>
            <param name="identifier">The identifier of the secondary entity. If the identifier is an URI, the identifier would be the last part of the URI after the last slash (/)</param>
            <param name="properties">Properties of the secondary entity</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.SecondaryEntity.#ctor">
            <summary>
            Empty constructor, only for ConceptEntity use
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.SecondaryEntity.Identifier">
            <summary>
            Gets or sets the identifier of the secondary entity
            <remarks>If the identifier is an URI, the identifier would be the last part of the URI after the last slash (/)</remarks>
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Model.GnossDate">
            <summary>
            Represents a date in GNOSS
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.GnossDate.#ctor">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Model.GnossDate"/>.
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.GnossDate.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Model.GnossDate"/>
            </summary>
            <param name="date">A date</param>
            <param name="americanFormat">(Optional) True if the date is in American format</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.GnossDate.RomanToDecimal(System.String)">
            <author>Lorena Ruiz Elósegui</author>
            <datecreated>2014-01-08</datecreated>
            <summary>
            Converts a roman number to decimal number
            
            Code gets from http://my.opera.com/RAJUDASA/blog/2013/04/08/c-convert-roman-numbers-to-decimal-numbers
            
            Explicación:
            code process:
            convert string to char array.
            convert each char (roman number) to its equivalent decimal number and stores them in array.
            Iterating over array, check whether low number is left side next to high number if yes, remove that low number from high number else add both numbers.
            Assumes only one low number comes left side and max 3 low numbers right side at a time of high number.(ex: IV and VIII)
            
            Try invoking the above method with these sample Roman Numbers:
            "MMXIII" -> 2013; DCCCXLI -> 841; MCMLXVII -> 1967; XIX -> 19
            </summary>
            <param name="romanNum"></param>
            <returns></returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.GnossDate.ToString">
            <summary>
            Gets a <see cref="T:Gnoss.ApiWrapper.Model.GnossDate"/> as a string
            </summary>
            <returns>String with the information of this <see cref="T:Gnoss.ApiWrapper.Model.GnossDate"/>.</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.GnossDate.IsEmpty">
            <summary>
            Gets if this Date is not initialized
            </summary>
            <returns><c>true</c> if the date is empty, <c>false</c> in another case</returns>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.GnossDate.Millennium">
            <summary>
            Gets or sets the millennium
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.GnossDate.Century">
             <summary>
            Gets or sets the century
             </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.GnossDate.MillenniumRoman">
            <summary>
            Gets or sets the millennium in roman numbers
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.GnossDate.NormDate">
            <summary>
            Gets or sets the normalized date with the pattern yyyyMMddhhmmss.
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.GnossDate.PrecisionDate">
            <summary>
            Gets or sets the accurancy
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.GnossDate.TypeDate">
            <summary>
            Gets or sets the type of date
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.GnossDate.CenturyRoman">
            <summary>
            Gets or sets the century in roman numbers
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.GnossDate.Day">
            <summary>
            Gets or sets the day (2 digits)
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.GnossDate.Month">
            <summary>
            Gets or sets the month (2 digits)
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.GnossDate.Year">
            <summary>
            Gets or sets the year (4 digits)
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.GnossDate.Hours">
            <summary>
            Gets or sets the hour (2 digits)
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.GnossDate.Minutes">
            <summary>
            Gets or sets the minutes (2 digits)
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.GnossDate.Seconds">
            <summary>
            Gets or sets the seconds (2 digits)
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Model.AuxiliaryEntitiesTriplesToInclude">
            <summary>
            Auxiliary entities triples
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.AuxiliaryEntitiesTriplesToInclude.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.AuxiliaryEntitiesTriplesToInclude.#ctor(System.String,System.String,System.String,System.Guid)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Model.AuxiliaryEntitiesTriplesToInclude"/>
            </summary>
            <param name="value">Value of the property</param>
            <param name="predicate">[Parent predicate]|[children property]</param>
            <param name="entityName">Entity name</param>
            <param name="entityIdentifier">Entity identifier</param>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.AuxiliaryEntitiesTriplesToInclude.Identifier">
            <summary>
            Gets or sets the entity identifier
            For example, in http://gnoss.com/items/article_223b30c1-2552-4ed0-ba5f-e257585b08bf_9c126c3a-7850-4cdc-b176-95ae6fd0bb78
            the identifier is: 9c126c3a-7850-4cdc-b176-95ae6fd0bb78
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.AuxiliaryEntitiesTriplesToInclude.Name">
            <summary>
            Gets or sets the entity name. 
            For example, in http://gnoss.com/items/article_223b30c1-2552-4ed0-ba5f-e257585b08bf_9c126c3a-7850-4cdc-b176-95ae6fd0bb78
            the entity name is: article
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.AuxiliaryEntitiesTriplesToInclude.Value">
            <summary>
            Gets or sets the value of the predicate
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.AuxiliaryEntitiesTriplesToInclude.Predicate">
            <summary>
            Gets or sets the predicate of the auxiliary entity
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Model.TriplesToInclude">
            <summary>
            Triples to be included
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.TriplesToInclude.#ctor">
            <summary>
            Empry constructor
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.TriplesToInclude.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a new object to insert a new property in a resource
            </summary>
            <param name="value">Value of the new property</param>
            <param name="predicate">Predicate of the property to be inserted, with namespace without prefix. If it's an auxiliary entity property, you must set the predicate as firstLevelPredicate|secondLevelPredicate</param>
            <param name="title">If the property inserted is the title, set this property to TRUE</param>
            <param name="description">If the property inserted is the description, set this property to TRUE</param>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.TriplesToInclude.NewValue">
            <summary>
            Gets or sets the new value of the property
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.TriplesToInclude.Predicate">
            <summary>
            Gets or sets the predicate of the property to be inserted, with namespace without prefix. If it's an auxiliary entity property, you must set the predicate as firstLevelPredicate|secondLevelPredicate
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.TriplesToInclude.Title">
            <summary>
            If the property inserted is the title, set this property to TRUE
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.TriplesToInclude.Description">
            <summary>
            If the property inserted is the description, set this property to TRUE
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Model.TriplesToModify">
            <summary>
            Triples to be modified
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.TriplesToModify.#ctor">
            <summary>
            Empry constructor
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.TriplesToModify.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a new object to modify a property in a resource
            </summary>
            <param name="newValue">New value of the property</param>
            <param name="predicate">Predicate of the property to be modified, with namespace without prefix. If it's an auxiliary entity property, you must set the predicate as firstLevelPredicate|secondLevelPredicate</param>
            <param name="title">If the property to be modified is the title, set this property to TRUE</param>
            <param name="description">If the property to be modified is the description, set this property to TRUE</param>
            <param name="oldValue">Current value of the property</param>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.TriplesToModify.OldValue">
            <summary>
            Gets or sets the old value of the property
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Model.Multilanguage">
            <summary>
            It's used to represent the language in the title and description of the MultilanguageTitle of a resource
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.Multilanguage.String">
            <summary>
            Gets or sets the multilanguage string
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.Multilanguage.Language">
            <summary>
            Gets or sets the laguage of the string
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.Multilanguage.#ctor(System.String,System.String)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Model.Multilanguage"/>
            </summary>
            <param name="multiLanguageString">Multilanguage string</param>
            <param name="language">Language of the string</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.Multilanguage.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Model.Ontology">
            <summary>
            Represent an ontology
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.Ontology.ResourceId">
            <summary>
            Gets or sets the first part of the resource identifier
            
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.Ontology.ArticleId">
            <summary>
            Gets or sets the second part of the resource identifier
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.Ontology.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Gnoss.ApiWrapper.Model.OntologyProperty},System.Collections.Generic.List{Gnoss.ApiWrapper.Model.OntologyEntity})">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Model.Ontology"/>
            </summary>
            <param name="graphsUrl">Graphs url of the enviroment.</param>
            <param name="ontologyUrl">Download url of the ontology</param>
            <param name="rdfType">The <c>rdf:type</c> property of the ontology</param>
            <param name="rdfsLabel">the <c>rdfs:label</c> of the ontology</param>
            <param name="prefixList">Prefix list declared in the ontology</param>
            <param name="propertyList">Property list of the ontology</param>
            <param name="entityList">list of <see cref="T:Gnoss.ApiWrapper.Model.OntologyEntity"> auxiliary entities</see></param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.Ontology.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Gnoss.ApiWrapper.Model.OntologyProperty},System.Collections.Generic.List{Gnoss.ApiWrapper.Model.OntologyEntity},System.Guid,System.Guid)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Model.Ontology"/>
            </summary>
            <param name="graphsUrl">Graphs url of the enviroment.</param>
            <param name="ontologyUrl">Download url of the ontology</param>
            <param name="rdfType">The <c>rdf:type</c> property of the ontology</param>
            <param name="rdfsLabel">the <c>rdfs:label</c> of the ontology</param>
            <param name="prefixList">Prefix list declared in the ontology</param>
            <param name="propertyList">Property list of the ontology</param>
            <param name="entityList">list of <see cref="T:Gnoss.ApiWrapper.Model.OntologyEntity"> auxiliary entities</see></param>
            <param name="resourceId">First part of the resource identifier</param>
            <param name="articleId">Second part of the resource identifier</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.Ontology.GenerateRDF">
            <summary>
            Generate the rdf file with all the components of the ontology
            </summary>
            <returns>Rdf file</returns>
        </member>
        <member name="T:Gnoss.ApiWrapper.Model.BaseOntology">
            <summary>
            Abstract class that represents an ontology
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.BaseOntology.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Gnoss.ApiWrapper.Model.OntologyProperty},System.String,System.Collections.Generic.List{Gnoss.ApiWrapper.Model.OntologyEntity})">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Model.BaseOntology"/>
            </summary>
            <param name="graphsUrl">Graphs url of the enviroment.</param>
            <param name="ontologyUrl">Download url of the ontology</param>
            <param name="rdfType">The <c>rdf:type</c> property of the ontology</param>
            <param name="rdfsLabel">the <c>rdfs:label</c> of the ontology</param>
            <param name="prefixList">Prefix list declared in the ontology</param>
            <param name="propertyList">Property list of the ontology</param>
            <param name="identifier">Ontology identifier</param>
            <param name="entityList">list of <see cref="T:Gnoss.ApiWrapper.Model.OntologyEntity"> auxiliary entities</see></param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.BaseOntology.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Gnoss.ApiWrapper.Model.OntologyProperty},System.Collections.Generic.List{Gnoss.ApiWrapper.Model.OntologyEntity})">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Model.BaseOntology"/>
            </summary>
            <param name="graphsUrl">Graphs url of the enviroment.</param>
            <param name="ontologyUrl">Download url of the ontology</param>
            <param name="rdfType">The <c>rdf:type</c> property of the ontology</param>
            <param name="rdfsLabel">the <c>rdfs:label</c> of the ontology</param>
            <param name="prefixList">Prefix list declared in the ontology</param>
            <param name="propertyList">Property list of the ontology</param>
            <param name="entityList">list of <see cref="T:Gnoss.ApiWrapper.Model.OntologyEntity"> auxiliary entities</see></param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.BaseOntology.GenerateRDF">
            <summary>
            Generate the rdf file with all the components of the ontology
            </summary>
            <returns>Rdf file</returns>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseOntology.Name">
            <summary>
            Gets or sets the name of the ontology
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseOntology.PrefixList">
            <summary>
            Gets or sets the prefix list declared in the ontology
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseOntology.RdfType">
            <summary>
            Gets or sets the <c>rdf:type</c> of the ontology
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseOntology.RdfsLabel">
            <summary>
            Gets or sets the <c>rdfs:label</c> of the ontology
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseOntology.Identifier">
            <summary>
            Gets or sets the ontology identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseOntology.Properties">
            <summary>
            Gets or sets the property list of the ontology
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseOntology.Entities">
            <summary>
            Gets or sets the list of <see cref="T:Gnoss.ApiWrapper.Model.OntologyEntity"> auxiliary entities</see>
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseOntology.GraphsUrl">
            <summary>
            Gets or sets the graphs url of the enviroment. 
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseOntology.OntologyUrl">
            <summary>
            Gets or sets the download url of the ontology
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Model.SecondaryOntology">
            <summary>
            Represent a secondary ontology
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.SecondaryOntology.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Gnoss.ApiWrapper.Model.OntologyProperty},System.String,System.Collections.Generic.List{Gnoss.ApiWrapper.Model.SecondaryEntity},System.Collections.Generic.List{Gnoss.ApiWrapper.Model.OntologyEntity})">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Model.BaseOntology"/>
            </summary>
            <param name="graphsUrl">Graphs url of the enviroment.</param>
            <param name="ontologyUrl">Download url of the ontology</param>
            <param name="rdfType">The <c>rdf:type</c> property of the ontology</param>
            <param name="rdfsLabel">the <c>rdfs:label</c> of the ontology</param>
            <param name="prefixList">Prefix list declared in the ontology</param>
            <param name="propertyList">Property list of the ontology</param>
            <param name="identifier">Ontology identifier</param>
            <param name="entityList">List of <see cref="T:Gnoss.ApiWrapper.Model.OntologyEntity"> auxiliary entities</see></param>
            <param name="secondaryEntityList">Secondary entity list of the ontology</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.SecondaryOntology.GenerateRDF">
            <summary>
            Generate the rdf file with all the components of the ontology
            </summary>
            <returns>Rdf file</returns>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.SecondaryOntology.SecondaryEntities">
            <summary>
            Gets or sets the secondary entity list of the ontology
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Model.TaxonomyOntology">
            <summary>
            Represents the ontology taxonomy.owl
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.TaxonomyOntology.#ctor(System.String,System.String,System.String,System.Collections.Generic.List{Gnoss.ApiWrapper.Model.ConceptEntity})">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Model.TaxonomyOntology"/>.
            </summary>
            <param name="collectionNameIdentifier">Collection identifier</param>
            <param name="dcSource"><c>dc:source</c></param>
            <param name="scopeNote"><c>skos:scopeNote</c></param>
            <param name="conceptEntityList">Concept entity list</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.TaxonomyOntology.GenerateRDF">
            <summary>
            Generate the rdf file with all the components of the ontology
            </summary>
            <returns>Rdf file</returns>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.TaxonomyOntology.ConceptEntities">
            <summary>
            Gets the concept entity list of the ontology
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.TaxonomyOntology.RdfFile">
            <summary>
            Gets or sets the text file with the rdf content of the ontology
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.TaxonomyOntology.StringRdfFile">
            <summary>
            Gets the content of the <see cref="P:Gnoss.ApiWrapper.Model.TaxonomyOntology.RdfFile">RdfFile</see> as string
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Model.OntologyProperty">
            <summary>
            Represents a property from an ontology
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.OntologyProperty.Equals(Gnoss.ApiWrapper.Model.OntologyProperty)">
            <summary>
            Returns true if <paramref name="property"/> is equals to the current property
            </summary>
            <param name="property"><see cref="T:Gnoss.ApiWrapper.Model.OntologyProperty"/> property to compare</param>
            <returns><c>true</c> if <paramref name="property"/> is equals to the current property, <c>false</c> in another case</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.OntologyProperty.GetHashCode">
            <summary>
            Gets the HashCode of the property
            </summary>
            <returns>HasCode</returns>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.OntologyProperty.Value">
            <summary>
            Gets or sets the property value
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.OntologyProperty.Name">
            <summary>
            Gets or sets the property name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.OntologyProperty.Language">
            <summary>
            Gets or sets the language property (en, es...)
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Model.BoolOntologyProperty">
            <summary>
            Represents a boolean property from an ontology
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.BoolOntologyProperty.#ctor(System.String,System.Nullable{System.Boolean})">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Model.BoolOntologyProperty"/>
            </summary>
            <param name="label">Property predicate</param>
            <param name="value">Value of the predicate</param>
        </member>
        <member name="T:Gnoss.ApiWrapper.Model.DateOntologyProperty">
            <summary>
            Represents a date property from an ontology
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.DateOntologyProperty.#ctor(System.String,System.DateTime)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Model.DateOntologyProperty"/>.
            </summary>
            <param name="label">Property predicate</param>
            <param name="date">Property value</param>
        </member>
        <member name="T:Gnoss.ApiWrapper.Model.ImageOntologyProperty">
            <summary>
            Represents a image property from an ontology
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.ImageOntologyProperty.#ctor(System.String,System.String)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Model.ImageOntologyProperty"/>.
            </summary>
            <param name="label">Property predicate</param>
            <param name="value">Property value</param>
        </member>
        <member name="T:Gnoss.ApiWrapper.Model.ListStringOntologyProperty">
            <summary>
            Represents a String List property from an ontology
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.ListStringOntologyProperty.#ctor(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Model.ListStringOntologyProperty"/>.
            </summary>
            <param name="label">Property predicate</param>
            <param name="value">Property value</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.ListStringOntologyProperty.#ctor(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Model.ListStringOntologyProperty"/>.
            </summary>
            <param name="label">Property predicate</param>
            <param name="value">Property value</param>
            <param name="language">Property language</param>
        </member>
        <member name="T:Gnoss.ApiWrapper.Model.StringOntologyProperty">
            <summary>
            Represents string property from an ontology
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.StringOntologyProperty.#ctor(System.String,System.String)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Model.StringOntologyProperty"/>.
            </summary>
            <param name="label">Property predicate</param>
            <param name="value">Property value</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.StringOntologyProperty.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Model.ListStringOntologyProperty"/>.
            </summary>
            <param name="label">Property predicate</param>
            <param name="value">Property value</param>
            <param name="language">Property language</param>
        </member>
        <member name="T:Gnoss.ApiWrapper.Model.ComplexOntologyResource">
            <summary>
            Represents a resource based on a complex ontology
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.ComplexOntologyResource.GnossId">
            <summary>
            Gets or sets the GNOSS Identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.ComplexOntologyResource.RdfFile">
            <summary>
            Gets or sets the rdf file
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.ComplexOntologyResource.StringRdfFile">
            <summary>
            Gets the rdf file as string
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.ComplexOntologyResource.PublisherEmail">
            <summary>
            Gets or sets the publisher email
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.ComplexOntologyResource.MainImage">
            <summary>
            Gets or sets the main image
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.ComplexOntologyResource.Ontology">
            <summary>
            Gets or sets the ontolgy which the resource is based on
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.ComplexOntologyResource.AttachedFilesName">
            <summary>
            Gets the attached files name
            </summary>
            <remarks>
            To add an attached file, use the AttachFile or AttachImage methods
            </remarks>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.ComplexOntologyResource.AttachedFilesType">
            <summary>
            Gets the attached files types. The possible types are listed in: <see cref="T:Gnoss.ApiWrapper.ApiModel.AttachedResourceFilePropertyTypes">AttachedResourceFilePropertyTypes</see> class
            </summary>
            <remarks>
            To add an attached file, use the AttachFile or AttachImage methods
            </remarks>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.ComplexOntologyResource.AttachedFiles">
            <summary>
            Gets the attached files. The possible types are listed in: <see cref="T:Gnoss.ApiWrapper.ApiModel.AttachedResourceFilePropertyTypes">AttachedResourceFilePropertyTypes</see> class
            </summary>
            <remarks>
            To add an attached file, use the AttachFile or AttachImage methods
            </remarks>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.ComplexOntologyResource.MustGenerateScreenshot">
            <summary>
            Gets if the screen shot of the resource must be generated
            </summary>
            <remarks>To set this property to true, use the <see cref="M:Gnoss.ApiWrapper.Model.ComplexOntologyResource.GenerateScreenshot(System.String,System.String,System.Int32[])">GenerateScreenshot</see> method</remarks>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.ComplexOntologyResource.ScreenshotUrl">
            <summary>
            Gets the screenshot url
            </summary>
            <remarks>To set this property, use the <see cref="M:Gnoss.ApiWrapper.Model.ComplexOntologyResource.GenerateScreenshot(System.String,System.String,System.Int32[])">GenerateScreenshot</see> method</remarks>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.ComplexOntologyResource.ScreenshotPredicate">
            <summary>
            Gets the predicate which will have a reference to the screenshot
            </summary>
            <remarks>To set this property, use the <see cref="M:Gnoss.ApiWrapper.Model.ComplexOntologyResource.GenerateScreenshot(System.String,System.String,System.Int32[])">GenerateScreenshot</see> method</remarks>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.ComplexOntologyResource.ScreenshotSizes">
            <summary>
            Gets the screenshot sizes. It will generate as many screenshots as sizes in this array
            </summary>
            <remarks>To set this property, use the <see cref="M:Gnoss.ApiWrapper.Model.ComplexOntologyResource.GenerateScreenshot(System.String,System.String,System.Int32[])">GenerateScreenshot</see> method</remarks>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.ComplexOntologyResource.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.ComplexOntologyResource.#ctor(System.String)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Model.ComplexOntologyResource"/>, asigning only the GnossId property
            </summary>
            <param name="largeGnossId">Gnoss identifier used as subject in the ontology graph</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.ComplexOntologyResource.#ctor(System.Guid)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.Model.ComplexOntologyResource"/>, asigning only the ShortGnossId property
            </summary>
            <param name="shortGnossId">Internal GNOSS identifier used as subject in the shearch graph</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.ComplexOntologyResource.GenerateScreenshot(System.String,System.String,System.Int32[])">
            <summary>
            Prepares the screenshot of a url with the specified sizes. The screenshot will be asigned to imagePredicate property
            </summary>
            <param name="screenshotUrl">Url to generate the screenshot</param>
            <param name="imagePredicate">Predicate where the screenshot url will be saved</param>
            <param name="screenshotSizes">Screenshot sizes. It will generate as many screenshots as sizes in this array</param>
            <example>Generate a screenshot of 'http://www.gnoss.com/home' with sizes 240 y 435 in the predicate 'blog:image'
                <code>
                    ComplexOntologyResource resource = new ComplexOntologyResource();
                    resource.GenerateScreenshot("http://www.gnoss.com/home", "http://ontology.gnoss.com/blogontology.owl/2013-11#image", new int[] { 240, 435 });
                </code>
            </example>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.ComplexOntologyResource.ToString">
            <summary>
            Gets a <see cref="T:Gnoss.ApiWrapper.Model.ComplexOntologyResource"/> as a string
            </summary>
            <returns>String with the information of this <see cref="T:Gnoss.ApiWrapper.Model.ComplexOntologyResource"/>.</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.ComplexOntologyResource.AttachFile(System.String,System.String,Gnoss.ApiWrapper.Model.OntologyEntity,System.String,System.String)">
            <summary>
            Attach a file (not an image, to attach an image use AttachImage method) to the resource. 
            </summary>
            <param name="downloadUrl">Download Url. It can be a local path or a internet url</param>
            <param name="filePredicate">Predicate of the ontological property where the file reference will be inserted</param>
            <param name="entity">(Optional) Auxiliary entity which would have the reference to the file</param>
            <param name="fileIdentifier">(Optional) Unique identifier of the file. Only neccesary if there is more than one file with the same name</param>
            <param name="language">(Optional) The file language</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.ComplexOntologyResource.AttachFile(System.Byte[],System.String,System.String,Gnoss.ApiWrapper.Model.OntologyEntity)">
            <summary>
            Attach a file (not an image, to attach an image use AttachImage method) to the resource. 
            </summary>
            <param name="file">The file bytes</param>
            <param name="filePredicate">Predicate of the ontological property where the file reference will be inserted</param>
            <param name="fileName">The file name</param>
            <param name="entity">(Optional) Auxiliary entity which would have the reference to the file</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.ComplexOntologyResource.AttachDownloadableFile(System.Byte[],System.String,System.String,Gnoss.ApiWrapper.Model.OntologyEntity,System.String)">
            <summary>
            Attach a file (not an image, to attach an image use AttachImage method) to the resource that can be accessed from the Web. It means that the file won't be encripted in the server
            </summary>
            <param name="file">Archivo a adjuntar (no imagen).</param>
            <param name="filePredicate">Predicate of the ontological property where the file reference will be inserted</param>
            <param name="entity">(Optional) Auxiliary entity which would have the reference to the file</param>
            <param name="fileName">The file name</param>
            <param name="language">(Optional) The file language</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.ComplexOntologyResource.AttachReferenceToFile(System.String,System.String,Gnoss.ApiWrapper.Model.OntologyEntity,System.String,System.String)">
            <summary>
            Attach a reference to a file (not an image, to attach an image use AttachImageWithoutReference method) previusly uploaded using the <see cref="M:Gnoss.ApiWrapper.Model.ComplexOntologyResource.AttachFileWithoutReference(System.String,System.String,System.String)"/> method 
            </summary>
            <param name="downloadUrl">Download Url. It can be a local path or a internet url</param>
            <param name="filePredicate">Predicate of the ontological property where the file reference will be inserted</param>
            <param name="entity">(Optional) Auxiliary entity which would have the reference to the file</param>
            <param name="fileIdentifier">(Optional) Unique identifier of the file. Only neccesary if there is more than one file with the same name</param>
            <param name="language">(Optional) The file language</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.ComplexOntologyResource.AttachReferenceToDownloadableFile(System.String,System.String,Gnoss.ApiWrapper.Model.OntologyEntity,System.String,System.String)">
            <summary>
            Attach a reference to a file (not an image, to attach an image use AttachImageWithoutReference method) previusly uploaded using the <see cref="M:Gnoss.ApiWrapper.Model.ComplexOntologyResource.AttachFileWithoutReference(System.String,System.String,System.String)"/> method 
            A downloadable file it's a file that can be accessed from the Web. It means that the file won't be encripted in the server
            </summary>
            <param name="downloadUrl">Download Url. It can be a local path or a internet url</param>
            <param name="filePredicate">Predicate of the ontological property where the file reference will be inserted</param>
            <param name="entity">(Optional) Auxiliary entity which would have the reference to the file</param>
            <param name="fileIdentifier">(Optional) Unique identifier of the file. Only neccesary if there is more than one file with the same name</param>
            <param name="language">(Optional) The file language</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.ComplexOntologyResource.AttachFileWithoutReference(System.String,System.String,System.String)">
            <summary>
            Uploads a file to the server, but it's not referenced by the resource
            </summary>
            <param name="downloadUrl">Download Url. It can be a local path or a internet url</param>
            <param name="fileIdentifier">(Optional) Unique identifier of the file. Only neccesary if there is more than one file with the same name</param>
            <param name="language">(Optional) The file language</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.ComplexOntologyResource.AttachDownloadableFileWithoutReference(System.String,System.String,System.String)">
            <summary>
            Uploads a file to the server, but it's not referenced by the resource. 
            A downloadable file it's a file that can be accessed from the Web. It means that the file won't be encripted in the server
            </summary>
            <param name="downloadUrl">Download Url. It can be a local path or a internet url</param>
            <param name="fileIdentifier">(Optional) Unique identifier of the file. Only neccesary if there is more than one file with the same name</param>
            <param name="language">(Optional) The file language</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.ComplexOntologyResource.AttachImage(System.String,System.Collections.Generic.List{Gnoss.ApiWrapper.Model.ImageAction},System.String,System.Boolean,System.String,Gnoss.ApiWrapper.Model.OntologyEntity,System.Boolean,System.Boolean)">
            <summary>
            Attach an image to the resource. It generates as many images as actions contains the actions parameter
            </summary>
            <param name="downloadUrl">Download url of the image. It can be a local path or a internet url</param>
            <param name="actions">List of transformations to do over the image</param>
            <param name="predicate">Predicate of the ontological property where the image reference will be inserted</param>
            <param name="mainImage">True if this image is the resource main image</param>
            <param name="extension">Image extension</param>
            <param name="saveOriginalImage">True if the original file must be saved</param>
            <param name="saveMaxSizedImage">True if the max sized image must be saved</param>
            <param name="entity">(Optional) Auxiliary entity which would have the reference to the image</param>
            <remarks>If a main image has lower size than the minimum permited (240px), acions must be null</remarks>
            <returns>True if the image has been attached successfully</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.ComplexOntologyResource.AttachReferenceToImage(System.Collections.Generic.List{Gnoss.ApiWrapper.Model.ImageAction},System.String,System.Boolean,System.Guid,System.String,Gnoss.ApiWrapper.Model.OntologyEntity)">
            <summary>
            Attach an image to the resource previusly uploaded using the AttachImageWithoutReference method 
            </summary>
            <param name="actions">List of transformations to do over the image</param>
            <param name="predicate">Predicate of the ontological property where the image reference will be inserted</param>
            <param name="mainImage">True if this image is the resource main image</param>
            <param name="entity">(Optional) Auxiliary entity which would have the reference to the image</param>
            <param name="imageId">Image identifier. If it's Guid.Empty, it would be automatically generated</param>
            <param name="extension">Image extension</param>
            <remarks>If a main image has lower size than the minimum permited (240px), acions must be null</remarks>
            <returns>True if the image reference has been attached successfully</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.ComplexOntologyResource.AttachImageWithoutReference(System.String,System.Collections.Generic.List{Gnoss.ApiWrapper.Model.ImageAction},System.Boolean,System.Guid,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Uploads an image to the server, but it's not referenced by the resource. It generates as many images as actions contains the actions parameter
            </summary>
            <param name="downloadUrl">Download Url. It can be a local path or a internet url</param>
            <param name="actions">List of transformations to do over the image</param>
            <param name="mainImage">True if this image is the resource main image</param>
            <param name="imageId">Image identifier. If it's Guid.Empty, it would be automatically generated</param>
            <param name="extension">Image extension</param>
            <param name="saveOriginalImage">True if the original file must be saved</param>
            <param name="saveMaxSizedImage">True if the max sized image must be saved</param>
            <param name="saveMainImage">True if the main image must be saved</param>
            <returns>True if the image has been uploaded successfully</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.ComplexOntologyResource.AttachImageWithoutReference(System.Byte[],System.Collections.Generic.List{Gnoss.ApiWrapper.Model.ImageAction},System.Boolean,System.Guid,System.String,System.Boolean,System.Boolean)">
            <summary>
            Uploads an image to the server, but it's not referenced by the resource. It generates as many images as actions contains the actions parameter
            </summary>
            <param name="originalImage">Image to upload</param>
            <param name="actions">List of transformations to do over the image</param>
            <param name="mainImage">True if this image is the resource main image</param>
            <param name="imageId">Image identifier. If it's Guid.Empty, it would be automatically generated</param>
            <param name="extension">Image extension</param>
            <param name="saveOriginalImage">True if the original file must be saved</param>
            <param name="saveMaxSizedImage">True if the max sized image must be saved</param>
            <returns>True if the image has been uploaded successfully</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.ComplexOntologyResource.AttachImage(System.Byte[],System.Collections.Generic.List{Gnoss.ApiWrapper.Model.ImageAction},System.String,System.Boolean,System.String,Gnoss.ApiWrapper.Model.OntologyEntity,System.Boolean,System.Boolean)">
            <summary>
            Attach an image to the resource. It generates as many images as actions contains the actions parameter
            </summary>
            <param name="originalImage">Image to upload,  null if it would be only a reference</param>
            <param name="actions">List of <see cref="T:Gnoss.ApiWrapper.Model.ImageAction"/></param>
            <param name="predicate">Ontology predicate</param>
            <param name="mainImage">True if the image is the resource main image</param>
            <param name="extension">Image extension</param>
            <param name="entity">(Optional) The auxiliary entity that owns the image property</param>
            <param name="saveOriginalImage">True if the original file must be saved</param>
            <param name="saveMaxSizedImage">True if the max sized image must be saved</param>
            <remarks>If a main image has lower size than the minimum permited (240px), acions must be null</remarks>
            <returns>True if the image reference has been attached successfully</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.ComplexOntologyResource.AttachFileInternal(System.Byte[],System.String,System.String,Gnoss.ApiWrapper.ApiModel.AttachedResourceFilePropertyTypes,Gnoss.ApiWrapper.Model.OntologyEntity,System.Boolean,System.String)">
            <summary>
            Attach a file
            </summary>
            <param name="file">File to attach</param>
            <param name="filePredicate">Predicate of the ontological property</param>
            <param name="fileName">File name</param>
            <param name="fileType">File type</param>
            <param name="onlyReference">True if the file mustn't be saved, only as a reference</param>
            <param name="entity">(Optional) The auxiliary entity that owns the file property</param>
            <param name="language">language of the file</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.ComplexOntologyResource.AttachImageInternal(System.Byte[],System.Collections.Generic.List{Gnoss.ApiWrapper.Model.ImageAction},System.String,System.Boolean,System.Guid,System.Boolean,Gnoss.ApiWrapper.Model.OntologyEntity,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Attach an image
            </summary>
            <param name="originalImage">Image to upload,  null if it would be only a reference</param>
            <param name="actions">List of <see cref="T:Gnoss.ApiWrapper.Model.ImageAction"/></param>
            <param name="predicate">Ontology predicate</param>
            <param name="mainImage">True if the image is the resource main image</param>
            <param name="imageId">Image identifier. If it's Guid.Empty, it would be automatically generated</param>
            <param name="onlyReference">True if the image mustn't be saved, only as a reference</param>
            <param name="entity">(Optional) The auxiliary entity that owns the image property</param>
            <param name="extension">Image extension</param>
            <param name="saveOriginalImage">True if the original file must be saved</param>
            <param name="saveMaxSizedImage">True if the max sized image must be saved</param>
            <param name="saveMainImage">True if the main image must be saved</param>
            <returns>True if the image reference has been attached successfully</returns>
        </member>
        <member name="T:Gnoss.ApiWrapper.Model.BaseResource">
            <summary>
            Abstract class that represents the basic properties of any resource
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseResource.Id">
            <summary>
            Gets or sets the resource identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseResource.Modified">
            <summary>
            Gets or sets if the resource has been modified
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseResource.Deleted">
            <summary>
            Gets or sets if the resource has been deleted
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseResource.GnossId">
            <summary>
            Gets or sets the gnoss identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseResource.Title">
            <summary>
            Gets or sets the resource title
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseResource.MultilanguageTitle">
            <summary>
            Gets or sets the multilanguage title
            Example: 
             resource.MultilanguageTitle.Add(new MultiIdioma("English title", Gnoss.ApiWrapper.Helpers.Languages.English));
             resource.MultilanguageTitle.Add(new MultiIdioma("French title", Gnoss.ApiWrapper.Helpers.Languages.French));
             resource.MultilanguageTitle.Add(new MultiIdioma("Spanish title", Gnoss.ApiWrapper.Helpers.Languages.Spanish));
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseResource.Description">
            <summary>
            Gets or sets the resource description
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseResource.MultilanguageDescription">
            <summary>
            Gets or sets the multilanguage description
            Example: 
             resource.MultilanguageDescription.Add(new MultiIdioma("English description", Gnoss.ApiWrapper.Helpers.Languages.English));
             resource.MultilanguageDescription.Add(new MultiIdioma("French description", Gnoss.ApiWrapper.Helpers.Languages.French));
             resource.MultilanguageDescription.Add(new MultiIdioma("Spanish description", Gnoss.ApiWrapper.Helpers.Languages.Spanish));
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseResource.Tags">
            <summary>
            Gets or sets the resource tags
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseResource.TextCategories">
            <summary>
            Gets or sets the resource categories names. It can be in hierarchy (setting the parent to childre all the categories names), or without hierarchy. 
            <example>If we want to set the category "Madrid", children of the category "Spain", the category text is: <c>Spain|Madrid</c></example>
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseResource.CategoriesIds">
            <summary>
            Gets or sets the categories identifiers. This list is automatic generated by <see cref="P:Gnoss.ApiWrapper.Model.BaseResource.TextCategories">TextCategories property</see> in <see cref="T:Gnoss.ApiWrapper.ResourceApi">ResourceApi</see>
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseResource.Author">
            <summary>
            Gets or sets the author of the resource. It there is more than one author, thay must be separated by comma (example: Miguel de Cervantes, William Shakespeare, ...)
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseResource.ShortGnossId">
            <summary>
            Gets or sets the GNOSS Guid resource calculated from <see cref="P:Gnoss.ApiWrapper.Model.BaseResource.GnossId">GnossId</see>
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseResource.CreatorIsAuthor">
            <summary>
            Gets or sets if the publisher of the resource is the author of it
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseResource.AutomaticTagsTextFromTitle">
            <summary>
            Gets or sets the text from which the tags are going to be calculated. This tags are going to be generated by the Gnoss Automatic Tag service from the title if this property is filled. 
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseResource.AutomaticTagsTextFromDescription">
            <summary>
            Gets or sets the description from which the tags are going to be calculated. This tags are going to be generated by the Gnoss Automatic Tag service from the description if this property is filled. 
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseResource.Visibility">
            <summary>
            Gets or sets the resource visibility.
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseResource.ReadersGroups">
            <summary>
            Gets or sets the resource readers groups.
            The editors and editors groups are set by his short name. If there is any organization group, the way to set this group is setting the organization_short_name and group_short_name. 
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseResource.EditorsGroups">
            <summary>
            Gets or sets the resource editors groups. 
            The value of this property must be tha short names of the groups, separated by commas. 
            The readers and readers groups are set by his short name. If there is any organization group, the way to set this group is setting the organization_short_name and group_short_name.  
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseResource.CreationDate">
            <summary>
            Gets or sets the resource creation date. If it's not set, the value would be the upload date. 
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseResource.PublishInHome">
            <summary>
            Gets or sets if this resource must be publised in tho community home
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseResource.Uploaded">
            <summary>
            Gets or sets if this resource has been uploaded correctly
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BaseResource.CanonicalUrl">
            <summary>
            Gets or sets the canonical Url of the resource
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.BaseResource.ReadFile(System.String)">
            <summary>
            Read a file from the internet or local file system
            </summary>
            <param name="downloadUrl">Url to download</param>
            <returns>The bytes of the file</returns>
        </member>
        <member name="T:Gnoss.ApiWrapper.Model.SecondaryResource">
            <summary>
            Represents a secondary resource
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.SecondaryResource.Id">
            <summary>
            Gets or sets the secondary entity identifier
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.SecondaryResource.SecondaryOntology">
            <summary>
            Gets or sets the secondary ontology
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.SecondaryResource.RdfFile">
            <summary>
            Gets or sets the rdf file
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.SecondaryResource.StringRdfFile">
            <summary>
            Gets or sets the rdf file as string
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.SecondaryResource.Uploaded">
            <summary>
            Gets or sets if this resource has been uploaded correctly
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.SecondaryResource.Modified">
            <summary>
            Gets or sets if the resource has been modified
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.SecondaryResource.Deleted">
            <summary>
            Gets or sets if the resource has been deleted
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.Model.BasicOntologyResource">
            <summary>
            Represents a resource based in the GNOSS ontology
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BasicOntologyResource.PropertiesName">
            <summary>
            Gets or sets the properties name
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BasicOntologyResource.DownloadUrl">
            <summary>
            Gets or sets the resource download url 
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BasicOntologyResource.AttachedFile">
            <summary>
            Gets the file or image to attach to the resource
            </summary>
            <remarks>
            To set this property, use <see cref="M:Gnoss.ApiWrapper.Model.BasicOntologyResource.AttachImage(System.String,System.Int32)">AttachImage</see> method or <see cref="M:Gnoss.ApiWrapper.Model.BasicOntologyResource.AttachFile(System.String)">AttachFile</see> method
            </remarks>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BasicOntologyResource.SnapshotSizes">
            <summary>
            Gets or sets the snapshot sizes
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.Model.BasicOntologyResource.GenerateSnapshot">
            <summary>
            Gets or sets if the snapshot must be generated or not
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.BasicOntologyResource.AttachImage(System.String,System.Int32)">
            <summary>
            Read an image from the local file system or the internet and asigns it to the <see cref="P:Gnoss.ApiWrapper.Model.BasicOntologyResource.AttachedFile"/> property
            </summary>
            <param name="downloadUrl">Absolute local path or url of the image</param>
            <param name="size">Size to resize the image after download it</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.BasicOntologyResource.AttachFile(System.String)">
            <summary>
            Read a file (not an image, to attach an image use <see cref="M:Gnoss.ApiWrapper.Model.BasicOntologyResource.AttachImage(System.String,System.Int32)"/>) from the local file system or the internet and asigns it to the <see cref="P:Gnoss.ApiWrapper.Model.BasicOntologyResource.AttachedFile"/> property
            </summary>
            <param name="downloadUrl">Absolute local path or url of the image</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.Model.BasicOntologyResource.ReadFile(System.String)">
            <summary>
            Read a file from the internet or local file system
            </summary>
            <param name="downloadUrl">Url to download</param>
            <returns>The bytes of the file</returns>
        </member>
        <member name="T:Gnoss.ApiWrapper.OAuth.OAuthInfo">
            <summary>
            Class to get the basic info of an oauth account
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.OAuth.OAuthInfo.Token">
            <summary>
            Gets the token of the account
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.OAuth.OAuthInfo.TokenSecret">
            <summary>
            Gets the token secret of the account
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.OAuth.OAuthInfo.ConsumerKey">
            <summary>
            Gets the consumer key associated to the token
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.OAuth.OAuthInfo.ConsumerSecret">
            <summary>
            Gets the consumer secret of the consumer
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.OAuth.OAuthInfo.ApiUrl">
            <summary>
            Gets the Api URL
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.OAuth.OAuthInfo.DeveloperEmail">
            <summary>
            Gets the email of the person responsible of the load
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.OAuth.OAuthInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="apiUrl">Api url</param>
            <param name="token">Token of the account</param>
            <param name="tokenSecret">Token secret of the account</param>
            <param name="consumerKey">Consumer key associated to the token</param>
            <param name="consumerSecret">Consumer secret of the consumer</param>
            <param name="developerEmail"></param>
        </member>
        <member name="M:Gnoss.ApiWrapper.OAuth.OAuthInfo.GetSignedUrl(System.String)">
            <summary>
            Sign a url to make a oauth request
            </summary>
            <param name="url">Url to sign</param>
            <returns></returns>
        </member>
        <member name="P:Gnoss.ApiWrapper.OAuth.OAuthInfo.OAuthSignedUrl">
            <summary>
            Gets a signed url for the API
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.OAuth.OAuthBase">
            <summary>
            Class to generate oauth parameters and sign urls
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.OAuth.OAuthBase.OAuthVersion">
            <summary>
            OAuth version
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.OAuth.OAuthBase.OAuthParameterPrefix">
            <summary>
            OAuth parameter prefix
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.OAuth.OAuthBase.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="consumerKey">Consumer key</param>
            <param name="consumerSecret">Consumer secret</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.OAuth.OAuthBase.GetOAuthParameters(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Gets the oauth parameters
            </summary>
            <param name="httpMethod">Http method of the request</param>
            <param name="url">url</param>
            <param name="requestToken">token</param>
            <param name="tokenSecret">token secret</param>
            <param name="verifier">verifier</param>
            <param name="callback">callback</param>
            <returns>Collection of parameter - value</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.OAuth.OAuthBase.GetOAuthParametersWithoutEncode(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Gets the oauth parameters without http encode
            </summary>
            <param name="httpMethod">Http method of the request</param>
            <param name="url">url</param>
            <param name="requestToken">token</param>
            <param name="tokenSecret">token secret</param>
            <param name="verifier">verifier</param>
            <param name="callback">callback</param>
            <returns>Collection of parameter - value</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.OAuth.OAuthBase.GetSignatureBase(System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Gets signature base
            </summary>
            <param name="httpMethod">Http method</param>
            <param name="url">url</param>
            <param name="oAuthParameters">oauth parameters</param>
            <returns></returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.OAuth.OAuthBase.GetSignatureBaseEncoded(System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Gets signature base encoded
            </summary>
            <param name="httpMethod">Http method</param>
            <param name="url">url</param>
            <param name="oAuthParameters">oauth parameters</param>
            <returns></returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.OAuth.OAuthBase.GetSignature(System.String,System.String,System.String)">
            <summary>
            Generate a signature
            </summary>
            <param name="consumerSecret">Consumer secret</param>
            <param name="signatureBase">Signature base</param>
            <param name="tokenSecret">Token secret</param>
            <returns>the sign</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.OAuth.OAuthBase.NormalizeParameters(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             The request parameters are collected, sorted and concatenated into a normalized string:
             * Parameters in the OAuth HTTP Authorization header (Authorization Header) excluding the realm parameter.
             * Parameters in the HTTP POST request body (with a content-type of application/x-www-form-urlencoded).
             * HTTP GET parameters added to the URLs in the query part.
             The oauth_signature parameter MUST be excluded.
            </summary>
            <param name="parameters">parameters</param>
            <returns></returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.OAuth.OAuthBase.NormalizeUrl(System.String)">
            <summary>
            The Signature Base String includes the request absolute URL, tying the signature to a specific 
            endpoint. The URL used in the Signature Base String MUST include the scheme, authority, and path, 
            and MUST exclude the query.
            </summary>
            <param name="url">url</param>
            <returns></returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.OAuth.OAuthBase.ComputeHash(System.Security.Cryptography.HashAlgorithm,System.String)">
            <summary>
            Helper function to compute a hash value
            </summary>
            <param name="hashAlgorithm">The hashing algoirhtm used. If that algorithm needs some initialization, like HMAC and its derivatives, they should be initialized prior to passing it to this function</param>
            <param name="data">The data to hash</param>
            <returns>a Base64 string of the hash value</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.OAuth.OAuthBase.GetQueryParameters(System.String)">
            <summary>
            Internal function to cut out all non oauth query string parameters (all parameters not begining with "oauth_")
            </summary>
            <param name="parameters">The query string part of the Url</param>
            <returns>A list of QueryParameter each containing the parameter name and value</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.OAuth.OAuthBase.UrlEncode(System.String)">
            <summary>
            This is a different Url Encode implementation since the default .NET one outputs the percent encoding in lower case.
            While this is not a problem with the percent encoding spec, it is used in upper case throughout OAuth
            </summary>
            <param name="value">The value to Url encode</param>
            <returns>Returns a Url encoded string</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.OAuth.OAuthBase.NormalizeRequestParameters(System.Collections.Generic.IList{Gnoss.ApiWrapper.OAuth.QueryParameter})">
            <summary>
            Normalizes the request parameters according to the spec
            </summary>
            <param name="parameters">The list of parameters already sorted</param>
            <returns>a string representing the normalized parameters</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.OAuth.OAuthBase.GenerateSignatureBase(System.Uri,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@)">
            <summary>
            Generate the signature base that is used to produce the signature
            </summary>
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="consumerKey">The consumer key</param>        
            <param name="token">The token, if available. If not available pass null or an empty string</param>
            <param name="tokenSecret">The token secret, if available. If not available pass null or an empty string</param>
            <param name="httpMethod">The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)</param>
            <param name="signatureType">The signature type. To use the default values use <see cref="T:Gnoss.ApiWrapper.OAuth.SignatureTypes">OAuthBase.SignatureTypes</see>.</param>
            <param name="nonce">A random string, to be stored by the server provided. This make each sign a single use sign</param>
            <param name="normalizedRequestParameters">The parameters normalized</param>
            <param name="normalizedUrl">The url normalized</param>
            <param name="timeStamp">The timestamp when the request is made</param>
            <returns>The signature base</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.OAuth.OAuthBase.GenerateSignatureUsingHash(System.String,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Generate the signature value based on the given signature base and hash algorithm
            </summary>
            <param name="signatureBase">The signature based as produced by the GenerateSignatureBase method or by any other means</param>
            <param name="hash">The hash algorithm used to perform the hashing. If the hashing algorithm requires initialization or a key it should be set prior to calling this method</param>
            <returns>A base64 string of the hash value</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.OAuth.OAuthBase.GenerateSignature(System.Uri,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@)">
            <summary>
            Generates a signature using the HMAC-SHA1 algorithm
            </summary>		
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="consumerKey">The consumer key</param>
            <param name="consumerSecret">The consumer seceret</param>
            <param name="token">The token, if available. If not available pass null or an empty string</param>
            <param name="tokenSecret">The token secret, if available. If not available pass null or an empty string</param>
            <param name="httpMethod">The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)</param>
            <param name="nonce">A random string, to be stored by the server provided. This make each sign a single use sign</param>
            <param name="normalizedRequestParameters">The parameters normalized</param>
            <param name="normalizedUrl">The url normalized</param>
            <param name="timeStamp">The timestamp when the request is made</param>
            <returns>A base64 string of the hash value</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.OAuth.OAuthBase.GenerateSignature(System.Uri,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Gnoss.ApiWrapper.OAuth.SignatureTypes,System.String@,System.String@)">
            <summary>
            Generates a signature using the specified signatureType 
            </summary>		
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="consumerKey">The consumer key</param>
            <param name="consumerSecret">The consumer seceret</param>
            <param name="token">The token, if available. If not available pass null or an empty string</param>
            <param name="tokenSecret">The token secret, if available. If not available pass null or an empty string</param>
            <param name="httpMethod">The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)</param>
            <param name="signatureType">The type of signature to use</param>
            <param name="nonce">A random string, to be stored by the server provided. This make each sign a single use sign</param>
            <param name="normalizedRequestParameters">The parameters normalized</param>
            <param name="normalizedUrl">The url normalized</param>
            <param name="timeStamp">The timestamp when the request is made</param>
            <returns>A base64 string of the hash value</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.OAuth.OAuthBase.GenerateTimeStamp">
            <summary>
            Generate the timestamp for the signature        
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.OAuth.OAuthBase.GenerateNonce">
            <summary>
            Generate a nonce
            </summary>
            <returns></returns>
        </member>
        <member name="P:Gnoss.ApiWrapper.OAuth.OAuthBase.ConsumerKey">
            <summary>
            Gets or sets the ConsumerKey
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.OAuth.OAuthBase.ConsumerSecret">
            <summary>
            Gets or sets the ConsumerSecret
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.OAuth.SignatureTypes">
            <summary>
            Provides a predefined set of algorithms that are supported officially by the protocol
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.OAuth.SignatureTypes.HMACSHA1">
            <summary>
            HMACSHA1 signature
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.OAuth.SignatureTypes.PLAINTEXT">
            <summary>
            PLAINTEXT signature
            </summary>
        </member>
        <member name="F:Gnoss.ApiWrapper.OAuth.SignatureTypes.RSASHA1">
            <summary>
            RSASHA1 signature
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.OAuth.QueryParameter">
            <summary>
            Provides an internal structure to sort the query parameter
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.OAuth.QueryParameter.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">name of the parameter</param>
            <param name="value">value of the parameter</param>
        </member>
        <member name="P:Gnoss.ApiWrapper.OAuth.QueryParameter.Name">
            <summary>
            Gets the name of the parameter
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.OAuth.QueryParameter.Value">
            <summary>
            Gets the value of the parameter
            </summary>
        </member>
        <member name="T:Gnoss.ApiWrapper.OAuth.QueryParameterComparer">
            <summary>
            Comparer class used to perform the sorting of the query parameters
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.OAuth.QueryParameterComparer.Compare(Gnoss.ApiWrapper.OAuth.QueryParameter,Gnoss.ApiWrapper.OAuth.QueryParameter)">
            <summary>
            Compares two parameters
            </summary>
            <param name="x">One parameter</param>
            <param name="y">Another parameter</param>
            <returns>True if both parameters are equals</returns>
        </member>
        <member name="T:Gnoss.ApiWrapper.ResourceApi">
            <summary>
            Wrapper for GNOSS resource API
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.#ctor(Gnoss.ApiWrapper.OAuth.OAuthInfo,System.String,System.String,System.String)">
            <summary>
            Constructor of <see cref="T:Gnoss.ApiWrapper.ResourceApi"/>
            </summary>
            <param name="communityShortName">Community short name which you want to use the API</param>
            <param name="oauth">OAuth information to sign the Api requests</param>
            <param name="developerEmail">(Optional) If you want to be informed of any incident that may happends during a large load of resources, an email will be sent to this email address</param>
            <param name="ontologyName">(Optional) Ontology name of the resources that you are going to query, upload or modify</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.#ctor(System.String)">
            <summary>
            Consturtor of <see cref="T:Gnoss.ApiWrapper.ResourceApi"/>
            </summary>
            <param name="configFilePath">Configuration file path, with a structure like http://api.gnoss.com/v3/exampleConfig.txt </param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.LoadComplexSemanticResourceList(System.Collections.Generic.List{Gnoss.ApiWrapper.Model.ComplexOntologyResource},System.Boolean,System.Int32)">
            <summary>
            Load a complex semantic resources list
            </summary>
            <param name="resourceList">List of resources to load</param>
            <param name="hierarquicalCategories">Indicates whether the categories has hierarchy</param>
            <param name="numAttemps">Default 5. Number of retries loading of the failed load of a resource</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.LoadComplexSemanticResourceListWithOntologyAndCommunity(System.Collections.Generic.List{Gnoss.ApiWrapper.Model.ComplexOntologyResource},System.Boolean,System.String,System.String)">
            <summary>
            Load resources of main entities in an otology and a community
            </summary>
            <param name="resourceList">List of resources to load</param>
            <param name="hierarchycalCategories">Indicates whether the categories has hierarchy</param>
            <param name="ontology">Ontology where resource will be loaded</param>
            <param name="communityShortName">Community short name where the resources will be loaded</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.LoadComplexSemanticResourceListSavingLocalRdf(System.Collections.Generic.List{Gnoss.ApiWrapper.Model.ComplexOntologyResource},System.Boolean,System.Int32,System.String)">
            <summary>
            Load a complex semantic resources list
            </summary>
            <param name="resourceList">List of resources to load</param>
            <param name="hierarquicalCategories">Indicates whether the categories has hierarchy</param>
            <param name="numAttemps">Default 5. Number of retries loading of the failed load of a resource</param>
            <param name="rdfsPath">Default null. Path to save the RDF, if necessary</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.LoadComplexSemanticResourceListCommunityShortName(System.Collections.Generic.List{Gnoss.ApiWrapper.Model.ComplexOntologyResource},System.Boolean,System.String,System.Int32)">
            <summary>
            Load resources of main entities in a community
            </summary>
            <param name="resourceList">List of resources to load</param>
            <param name="hierarquicalCategories">Indicates whether the categories has hierarchy</param>
            <param name="numAttemps">Default 5. Number of retries loading of the failed load of a resource</param>
            <param name="communityShortName">Default null. Defined if it is necessary the load in other community that the specified in the OAuth</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.LoadComplexSemanticResource(Gnoss.ApiWrapper.Model.ComplexOntologyResource,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Load a complex semantic resource <see cref="T:Gnoss.ApiWrapper.Model.ComplexOntologyResource"/>
            </summary>
            <param name="resource">Resource to load</param>
            <param name="hierarquicalCategories">Indicates whether the categories has hierarchy</param>
            <param name="isLast">There are not resources left to load</param>
            <param name="numAttemps">Default 5. Number of retries loading of the failed load of a resource</param>
            <returns>Resource identifier string</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.LoadComplexSemanticResourceSaveRdf(Gnoss.ApiWrapper.Model.ComplexOntologyResource,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Load a complex semantic resource <see cref="T:Gnoss.ApiWrapper.Model.ComplexOntologyResource"/> saving the resource rdf
            </summary>
            <param name="resource">Resource to load</param>
            <param name="hierarquicalCategories">Indicates whether the categories has hierarchy</param>
            <param name="isLast">There are not resources left to load</param>
            <param name="numAttemps">Default 2. Number of retries loading of the failed load of a resource</param>
            <param name="rdfsPath">Default null. Path to save the RDF, if necessary</param>
            <returns>Resource identifier string</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.LoadComplexSemanticResourceCommunityShortName(Gnoss.ApiWrapper.Model.ComplexOntologyResource,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Load a complex semantic resource in the community
            </summary>
            <param name="resource">Resource to load</param>
            <param name="hierarquicalCategories">Indicates whether the categories has hierarchy</param>
            <param name="isLast">There are not resources left to load</param>
            <param name="numAttemps">Default 2. Number of retries loading of the failed load of a resource</param>
            <param name="communityShortName">Default null. Defined if it is necessary the load in other community that the specified in the OAuth</param>
            <returns>Resource identifier string</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.LoadComplexSemanticResourceRdf(Gnoss.ApiWrapper.Model.ComplexOntologyResource,System.Byte[],System.Boolean,System.Boolean,System.Int32,System.String,System.String)">
            <summary>
            Load a complex semantic resource in the community with a rdf file
            </summary>
            <param name="resource">Resource to load</param>
            <param name="hierarquicalCategories">Indicates whether the categories has hierarchy</param>
            <param name="isLast">There are not resources left to load</param>
            <param name="numAttemps">Default 5. Number of retries loading of the failed load of a resource</param>
            <param name="rdfsPath">Default null. Path to save the RDF, if necessary</param>
            <param name="communityShortName">Default null. Defined if it is necessary the load in other community that the specified in the OAuth</param>
            <param name="rdfFile">Resource rdf file</param>
            <returns>Resource identifier string</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.LoadSecondaryResource(Gnoss.ApiWrapper.Model.SecondaryResource)">
            <summary>
            Loads a <see cref="T:Gnoss.ApiWrapper.Model.SecondaryResource"/>
            </summary>
            <param name="resource">The <see cref="T:Gnoss.ApiWrapper.Model.SecondaryResource"/> to load</param>
            <returns>Bool that indicates whether the resource has been correctly loaded</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.LoadSecondaryResourceList(System.Collections.Generic.List{Gnoss.ApiWrapper.Model.SecondaryResource})">
            <summary>
            Loads a list of <see cref="T:Gnoss.ApiWrapper.Model.SecondaryResource"/>
            </summary>
            <param name="resourceList">List of <see cref="T:Gnoss.ApiWrapper.Model.SecondaryResource"/> to load</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.MassiveUploadFiles(Gnoss.ApiWrapper.ApiModel.LoadResourceParams)">
            <summary>
            Loads the attached files of a not yet loaded resource.
            </summary>
            <param name="resource">
            community_short_name = community short name string
            resource_id = resource identifier guid
            resource_attached_files = resource attached files. List of SemanticAttachedResource
            SemanticAttachedResource:
                file_rdf_properties = image name
                file_property_type = type of file
                rdf_attached_files = image to load byte[]
            main_image = main image string
            </param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.MassiveUploadImages(Gnoss.ApiWrapper.ApiModel.LoadResourceParams)">
            <summary>
            Loads the attached images of a not yet loaded resource.
            </summary>
            <param name="resource">
            community_short_name = community short name string
            resource_id = resource identifier guid
            resource_attached_files = resource attached files. List of SemanticAttachedResource
            SemanticAttachedResource:
                file_rdf_properties = image name
                file_property_type = type of file
                rdf_attached_files = image to load byte[]
            main_image = main image string
            </param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.LoadPartitionedXmlOntology(System.Byte[],System.String)">
            <summary>
            Loads a partitioned xml of the ontology.
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.LoadPartitionedOntology(System.Byte[],System.String)">
            <summary>
            Loads a partitioned ontology
            </summary>
            <param name="ontologyFile">Ontology file</param>
            <param name="fileName">File name</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.ModifyComplexOntologyResource(Gnoss.ApiWrapper.Model.ComplexOntologyResource,System.Boolean,System.Boolean)">
            <summary>
            Modifies the complex ontology resource
            </summary>
            <param name="resource">Resource to load</param>
            <param name="hierarquicalCategories">Indicates whether the categories has hierarchy</param>
            <param name="isLast">There are not resources left to load</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.ModifyComplexOntologyResourceRDF(Gnoss.ApiWrapper.Model.ComplexOntologyResource,System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            Modifies the complex ontology resource with the rdf
            </summary>
            <param name="resource">Resource to load</param>
            <param name="hierarquicalCategories">Indicates whether the categories has hierarchy</param>
            <param name="isLast">There are not resources left to load</param>
            <param name="rdfFile">Resource rdf file</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.ModifyComplexSemanticResourceCommunityShortName(Gnoss.ApiWrapper.Model.ComplexOntologyResource,System.Boolean,System.Boolean,System.String)">
            <summary>
            Modifies the complex ontology resource
            </summary>
            <param name="resource">Resource to load</param>
            <param name="hierarquicalCategories">Indicates whether the categories has hierarchy</param>
            <param name="isLast">There are not resources left to load</param>
            <param name="communityShortName">Community short name where the resources will be loaded</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.ModifyBasicOntologyResource(Gnoss.ApiWrapper.Model.BasicOntologyResource,System.Boolean,System.Boolean)">
            <summary>
            Modifies the basic ontology resource
            </summary>
            <param name="resource">Resource to load</param>
            <param name="hierarquicalCategories">Indicates whether the categories has hierarchy</param>
            <param name="isLast">There are not resources left to load</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.ModifyBasicOntologyResourceList(System.Collections.Generic.List{Gnoss.ApiWrapper.Model.BasicOntologyResource}@,System.Boolean,System.Int32)">
            <summary>
            Modifies the basic ontology resource of the list <paramref name="resourceList"/>. It is necessary that the basic ontology resource has assigned the property <see cref="P:Gnoss.ApiWrapper.Model.BaseResource.GnossId"/>
            </summary>
            <param name="resourceList">Resource list to load</param>
            <param name="hierarquicalCategories">Indicates whether the categories has hierarchy</param>
            <param name="numAttemps">Default 2. Number of retries loading of the failed load of a resource</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.ModifyComplexSemanticResourceListWithOntologyAndCommunity(System.Collections.Generic.List{Gnoss.ApiWrapper.Model.ComplexOntologyResource}@,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
            Modifies the basic ontology resource of the list <paramref name="resourceList"/>. It is necessary that the basic ontology resource has assigned the property <see cref="P:Gnoss.ApiWrapper.Model.BaseResource.GnossId"/>
            </summary>
            <param name="resourceList">List of resources to load</param>
            <param name="hierarquicalCategories">Indicates whether the categories has hierarchy</param>
            <param name="ontology">Ontology where resource will be loaded</param>
            <param name="communityShortName">Community short name where the resources will be loaded</param>
            <param name="numAttemps">Default 1. Number of retries loading of the failed load of a resource</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.ModifyComplexSemanticResourceWithOntologyAndCommunity(Gnoss.ApiWrapper.Model.ComplexOntologyResource,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            Modifies the basic ontology resource. It is necessary that the basic ontology resource has assigned the property <see cref="P:Gnoss.ApiWrapper.Model.BaseResource.GnossId"/>
            </summary>
            <param name="resource">Resource to load</param>
            <param name="hierarquicalCategories">Indicates whether the categories has hierarchy</param>
            <param name="ontology">Ontology where resource will be loaded</param>
            <param name="communityShortName">Community short name where the resources will be loaded</param>
            <param name="isLast">There are not resources left to load</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.ModifyComplexSemanticResourceList(System.Collections.Generic.List{Gnoss.ApiWrapper.Model.ComplexOntologyResource},System.Boolean,System.Int32)">
            <summary>
            Modifies the basic ontology resource. It is necessary that the basic ontology resource has assigned the property <see cref="P:Gnoss.ApiWrapper.Model.BaseResource.GnossId"/>
            </summary>
            <param name="resourceList">List of resources to load</param>
            <param name="hierarquicalCategories">Indicates whether the categories has hierarchy</param>
            <param name="numAttemps">Default 1. Number of retries loading of the failed load of a resource</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.ModifyComplexSemanticResourceListCommunityShortName(System.Collections.Generic.List{Gnoss.ApiWrapper.Model.ComplexOntologyResource},System.Boolean,System.String,System.Int32)">
            <summary>
            Modifies the complex ontology resource. It is necessary that the basic ontology resource has assigned the property <see cref="P:Gnoss.ApiWrapper.Model.BaseResource.GnossId"/>
            </summary>
            <param name="resourceList">List of resources to load</param>
            <param name="hierarquicalCategories">Indicates whether the categories has hierarchy</param>
            <param name="numAttemps">Default 2. Number of retries loading of the failed load of a resource</param>
            <param name="communityShortName">Community short name where the resources will be loaded</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.ModifyCategoriesTagsComplexOntologyResource(System.Guid,System.String,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Modifies a property(tags or categories) of the resource
            </summary>
            <param name="resourceId">Resource identifier guid</param>
            <param name="property">Property to modify. Categories: 'skos:ConceptID' string mask, Tags: 'sioc_t:Tag' string mask</param>
            <param name="listToModify">Values list to set the property with them</param>
            <param name="hierarchicalCategories">Indicates whether the categories has hierarchy</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.ModifyComplexOntologyResourceWithImages(Gnoss.ApiWrapper.Model.ComplexOntologyResource,System.Boolean,System.Int32)">
            <summary>
            Modifies the complex ontology resource generating a new rdf, and also changes the physical image with the new image
            </summary>
            <param name="resource">Resource to load</param>
            <param name="hierarquicalCategories">Indicates whether the categories has hierarchy</param>
            <param name="numAttemps">Default 5. Number of retries loading of the failed load of a resource</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.RemoveResourceAttachedFiles(System.Guid,System.Collections.Generic.List{Gnoss.ApiWrapper.Model.RemoveTriples},System.Boolean)">
            <summary>
            Removes attached files of the resource
            </summary>
            <param name="resourceId">Resource identifier guid</param>
            <param name="publishHome">Indicates whether the home must be updated</param>
            <param name="removeTripleList">Resource triples list to modify</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.AttachFileToResource(System.Guid,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int16},System.Collections.Generic.List{System.Byte[]},System.Boolean)">
            <summary>
            Attaches a file to a semantic resource.
            </summary>
            <param name="resourceId">Resource identifier guid</param>
            <param name="filePredicate">Resource predicate on the ontology</param>
            <param name="fileName">File name to attach</param>
            <param name="fileRdfPropertiesList">Attached files names list</param>
            <param name="filePropertiesTypeList">It indicates whether the attachment is a file or a ArchivoLink</param>
            <param name="attachedFilesList">Attached files list</param>
            <param name="publishHome">Indicates whether the home must be updated</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.ReplaceResourceImage(System.Guid,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int16},System.Collections.Generic.List{System.Byte[]},System.Boolean)">
            <summary>
            Replaces the resource attached images
            </summary>
            <param name="resourceId">Resource identifier guid</param>
            <param name="oldImageName">Old image file name</param>
            <param name="newImageName">New image file name</param>
            <param name="imagePredicate">The predicate that will collect the image. Watch out, it does not support prefix, must be whole URIs.
            For example, with "gnoss:mainImage" setting, it would not work, it should be: "http://www.gnoss.com/mainImage"</param>
            <param name="fileRdfPropertiesList">Images names to load</param>
            <param name="filePropertiesTypeList">Attached files types</param>
            <param name="attachedFilesList">Images to attach</param>
            <param name="publishHome">Indicates whether the home must be updated</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.DeleteResourceList(System.Collections.Generic.List{Gnoss.ApiWrapper.Model.ComplexOntologyResource}@,System.Int32)">
            <summary>
            Delete resources list <paramref name="resourceList"/>. It is necessary that the resource has assigned the properties <see cref="P:Gnoss.ApiWrapper.Model.BaseResource.GnossId"/> or <see cref="P:Gnoss.ApiWrapper.Model.BaseResource.ShortGnossId"/>
            </summary>
            <param name="resourceList">Resources list to delete</param>
            <param name="numAttemps">Default 5. Number of retries loading of the failed load of a resource</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.PersistentDeleteResourceIdList(System.Collections.Generic.List{System.Guid},System.Boolean)">
            <summary>
            Persistent delete of a resources list. if not specified, deletes the attachments of the resource.
            </summary>
            <param name="guidList">Resource identifiers list</param>
            <param name="deleteAttached">Indicates if the attached resources must be deleted</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.PersistentDeleteResourceList(System.Collections.Generic.List{Gnoss.ApiWrapper.Model.ComplexOntologyResource}@,System.Boolean,System.Int32)">
            <summary>
            Persistent delete of a resources list
            </summary>
            <param name="resourceList">Resources list to delete</param>
            <param name="deleteAttached">Indicates if the attached resources must be deleted</param>
            <param name="numAttemps">Default 5. Number of retries loading of the failed load of a resource</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.LoadBasicOntologyResourceListIntNote(System.Collections.Generic.List{Gnoss.ApiWrapper.Model.BasicOntologyResource}@,System.Boolean,System.Int32)">
            <summary>
            Loads a basic ontology resource
            </summary>
            <param name="resourceList">Resources list to load</param>
            <param name="hierarquicalCategories">Indicates whether the categories has hierarchy</param>
            <param name="numAttemps">Default 5. Number of retries loading of the failed load of a resource</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.LoadBasicOntologyResourceListLink(System.Collections.Generic.List{Gnoss.ApiWrapper.Model.BasicOntologyResource}@,System.Boolean,System.Int32)">
            <summary>
            Loads a basic ontology resource list with link (Link to create the screenshot)
            </summary>
            <param name="resourceList">Resources list to load</param>
            <param name="hierarquicalCategories">Indicates whether the categories has hierarchy</param>
            <param name="numAttemps">Default 2. Number of retries loading of the failed load of a resource</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.LoadBasicOntologyResourceListFile(System.Collections.Generic.List{Gnoss.ApiWrapper.Model.BasicOntologyResource}@,System.Boolean,System.Int32)">
            <summary>
            Loads a basic ontology resource list with link (Link to create the screenshot)
            </summary>
            <param name="resourceList">Resources list to load</param>
            <param name="hierarquicalCategories">Indicates whether the categories has hierarchy</param>
            <param name="numAttemps">Default 5. Number of retries loading of the failed load of a resource</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.LoadBasicOntologyResourceListLinkVideo(System.Collections.Generic.List{Gnoss.ApiWrapper.Model.BasicOntologyResource}@,System.Boolean,System.Int32)">
            <summary>
            Loads a basic ontology resource list with a link to a Youtube video with resource type HyperLink
            </summary>
            <param name="resourceList">Resources list to load</param>
            <param name="hierarquicalCategories">Indicates whether the categories has hierarchy</param>
            <param name="numAttemps">Default 5. Number of retries loading of the failed load of a resource</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.LoadBasicOntologyResourceListVideo(System.Collections.Generic.List{Gnoss.ApiWrapper.Model.BasicOntologyResource}@,System.Boolean,System.Int32)">
            <summary>
            Loads a basic ontology resource list with resource type Video
            </summary>
            <param name="resourceList">Resources list to load</param>
            <param name="hierarquicalCategories">Indicates whether the categories has hierarchy</param>
            <param name="numAttemps">Default 5. Number of retries loading of the failed load of a resource</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.ModifySecondaryResourcesList(System.Collections.Generic.List{Gnoss.ApiWrapper.Model.SecondaryResource})">
            <summary>
            Modifies secondary entities loaded in a normal way (one RDF by resource).
            </summary>
            <param name="resourceList">Resource list to delete</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.ModifySecondaryResource(Gnoss.ApiWrapper.Model.SecondaryResource)">
            <summary>
            Modifies secondary entities loaded in a normal way (one RDF by resource).
            </summary>
            /// <param name="resourceList">Resource list to delete</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.DeleteSecondaryEntitiesList(System.Collections.Generic.List{System.String}@,System.Int32)">
            <summary>
            Deletes secondary entities loaded in a normal way (one RDF by resource).
            </summary>
            <param name="urlList">Resouce urls list to delete</param>
            <param name="numAttemps">Default 5. Number of retries loading of the failed load of a resource</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.DeleteSecondaryEntitiesList(System.Collections.Generic.List{Gnoss.ApiWrapper.Model.SecondaryResource}@,System.Int32)">
            <summary>
            Deletes secondary entities loaded in a normal way (one RDF by resource).
            </summary>
            <param name="resourceList">Resource list to delete</param>
            <param name="numAttemps">Default 5. Number of retries loading of the failed load of a resource</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.ModifyPropertiesLoadedResources(System.Collections.Generic.Dictionary{System.Guid,System.Collections.Generic.List{Gnoss.ApiWrapper.Model.TriplesToModify}},System.Int32,System.Boolean)">
            <summary>
            Method for modifying one or more properties of a loaded resource. In ModificarTriples can indicate whether title or description. By default false two fields. It influences the value of the resource searches
            </summary>
            <param name="resourceTriples">Contains as a key the resource guid identifier to modify and as a value a TriplesToModify list of the resource properties that will be modified</param> 
            <param name="publishHome">Indicates whether the home must be updated</param>
            <param name="numAttemps">Default 2. Number of retries loading of the failed load of a resource</param>
            <returns>Indicates whether the properties have been modified of the loaded resource</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.InsertPropertiesLoadedResources(System.Collections.Generic.Dictionary{System.Guid,System.Collections.Generic.List{Gnoss.ApiWrapper.Model.TriplesToInclude}},System.Int32,System.Boolean)">
            <summary>
            Method for adding one or more properties of a loaded resource. In IncluirTriples can indicate whether title or description. By default false two fields. It influences the value of the resource searches
            </summary>
            <param name="resourceTriples">Contains as a key the resource guid identifier to modify and as a value a TriplesToInclude list of the resource properties that will be included.</param>
            <param name="publishHome">Indicates whether the home must be updated</param>
            <param name="numAttemps">Default 2. Number of retries loading of the failed load of a resource</param>
            <returns>Indicates whether the properties have been added to the loaded resource</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.DeletePropertiesLoadedResources(System.Collections.Generic.Dictionary{System.Guid,System.Collections.Generic.List{Gnoss.ApiWrapper.Model.RemoveTriples}},System.Int32,System.Boolean)">
            <summary>
            Method for adding one or more properties of a loaded resource. In RemoveTriples can indicate whether title or description. By default false two fields. It influences the value of the resource searches.
            </summary>
            <param name="resourceTriples">Contains as a key the resource guid identifier to modify and as a value a RemoveTriples list of the resource properties that will be deleted.</param>
            <param name="publishHome">Indicates whether the home must be updated</param>
            <param name="numAttemps">Default 2. Number of retries loading of the failed load of a resource</param>
            <returns>Dictionary resource identifier and boolean indicating the successfull, or not, result of the action</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.ActionsOnPropertiesLoadedResources(System.Collections.Generic.Dictionary{System.Guid,System.Collections.Generic.List{Gnoss.ApiWrapper.Model.TriplesToModify}},System.Collections.Generic.Dictionary{System.Guid,System.Collections.Generic.List{Gnoss.ApiWrapper.Model.RemoveTriples}},System.Collections.Generic.Dictionary{System.Guid,System.Collections.Generic.List{Gnoss.ApiWrapper.Model.TriplesToInclude}},System.Collections.Generic.Dictionary{System.Guid,System.Collections.Generic.List{Gnoss.ApiWrapper.Model.AuxiliaryEntitiesTriplesToInclude}},System.Boolean)">
            <summary>
            Deletes, modifies and inserts triples in an already loaded resources.It is used in the case in which, to the same resource, want to do more than one of these actions at once.
            </summary>
            <param name="resourceTriplesModify">Contains as a key the resource guid identifier to modify and as a value a TriplesToModify list of the resource properties that will be modified</param>
            <param name="resourceTriplesDelete">Contains as a key the resource guid identifier to modify and as a value a RemoveTriples list of the resource properties that will be deleted</param>
            <param name="resourceTriplesInsert">Contains as a key the resource guid identifier to modify and as a value a TriplesToInclude list of the resource properties that will be inserted</param>        
            <param name="resourceTriplesAddAuxiliarEntity">Contains as a key the resource guid identifier to modify and as a value a AuxiliaryEntitiesTriplesToInclude list of the resource properties that will be inserted</param>
            <param name="publishHome">Indicates whether the home must be updated</param>
            <returns>Dictionary resource identifier and boolean indicating the successfull, or not, result of the action</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.ModifyPropertyLoadedSecondaryResource(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Gnoss.ApiWrapper.Model.TriplesToModify}},System.Int32,System.Boolean)">
            <summary>
            Modify one or more properties of an entity of a loaded resource.
            </summary>
            <param name="resourceTriples">Contains as a key the large Gnoss identifier of secondary resource to modify and as a value a ModificarTriples list of the resource properties to modified</param>
            <param name="publishHome">Indicates whether the home must be updated</param>
            <param name="numAttemps">Default 2. Number of retries loading of the failed load of a resource</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.InsertAuxiliarEntityOnPropertiesLoadedResource(System.Collections.Generic.Dictionary{System.Guid,System.Collections.Generic.List{Gnoss.ApiWrapper.Model.AuxiliaryEntitiesTriplesToInclude}},System.String,System.Int32,System.Boolean)">
            <summary>
            Adds one or more properties to an auxiliary entity to a loaded resource. It influences the value of the resource searches. If not exists, an auxiliary entity is created
            </summary>
            <param name="resourceTriples">Contains as a key the resource guid identifier to modify and as a value a AuxiliaryEntitiesTriplesToInclude list of the resource properties that will be inserted.
            For example: in http://www.gnoss.com/items/Application_223b30c1-2552-4ed0-ba5f-e257585b08bf_9c126c3a-7850-4cdc-b176-95ae6fd0bb78 the entity identifier is: 9c126c3a-7850-4cdc-b176-95ae6fd0bb78
            If an entity has more than one property, that Guid indicates that all properties belong to the same entity. Without that Guid, an entity is created for each property.</param>
            <param name="publishHome">Indicates whether the home must be updated</param>
            <param name="numAttemps">Default 2. Number of retries loading of the failed load of a resource</param>
            <param name="communityShortName">Community short name where the AuxiliaryEntitiesTriplesToInclude will be loaded</param>
            <returns>Indicates whether the properties have been inserted in the auxiliar entity</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.GetOntologyNameWithOutExtensionFromUrlOntology(System.String)">
            <summary>
            Gets the ontology name (without extension) from the url of the ontology
            </summary>
            <param name="urlOntology">URL of the ontology</param>
            <returns>String with the ontology name</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.GetOntologyNameWithExtensionFromUrlOntology(System.String)">
            <summary>
            Gets the ontology name (with extension) from the url of the ontology
            </summary>
            <param name="urlOntology">URL of the ontology</param>
            <returns>String with the ontology name</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.VirtuosoQuery(System.String,System.String,System.String)">
            <summary>
            Allows a virtuoso query, setting the 'SELECT' and 'WHERE' parts of the query and the graph name
            </summary>
            <param name="selectPart">The 'SELECT' query part</param>
            <param name="wherePart">The 'WHERE' query part</param>
            <param name="ontologiaName">Graph name where the query runs (without extension '.owl')</param>
            <returns>DataSet with the query result</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.VirtuosoQuery(System.String,System.String,System.Guid)">
            <summary>
            Allows a virtuoso query, setting the 'SELECT' and 'WHERE' parts of the query and the community identifier
            </summary>
            <param name="selectPart">The 'SELECT' query part</param>
            <param name="wherePart">The 'WHERE' query part</param>
            <param name="communityId">Community identifier</param>
            <returns>DataSet with the query result</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.ShortMultimediaTitleDescriptionString(System.Collections.Generic.List{Gnoss.ApiWrapper.Model.Multilanguage})">
            <summary>
            Sorts the multilanguage list of title or description with the main language in the first element
            </summary>
            <param name="listToOrder">Lista posiblemente desordenada</param>
            <returns>The list with the main language in the first element</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.GetShortGuid(System.String)">
            <summary>
            Returns a guid from a resource large identifier. If it cannot get it, returns an empty guid.
            </summary>
            <param name="largeResourceId">Resource large identifier</param>
            <returns></returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.GetSignForUrl(System.String)">
            <summary>
            Gets an OAuth signed url
            </summary>
            <param name="url">url to sign</param>
            <returns>Signed url string</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.GetBasicOntologyResouceRdf(System.String,System.String,System.String)">
            <summary>
            Gets the resource rdf and downloads it in the indicated directory path
            </summary>
            <param name="domain">Domain where the community belongs to</param>
            <param name="resourceId">Resource short identifier</param>
            <param name="directoryPath">Directory path where the resource will be downloaded</param>
            <returns>Resource rdf</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.DownloadFilesFromURL(System.String,System.String)">
            <summary>
            Downloads a file from the url
            </summary>
            <param name="URL">Resource url to download</param>
            <param name="fileName">File name where the resource will be downloaded</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.GetAutomaticLabelingTags(System.String,System.String)">
            <summary>
            Given a title and/or description, returns the extracted labels from EtiquetadoAutomatico
            </summary>
            <param name="title">(Optional) Resource title</param>
            <param name="description">(Optional) Resource description</param>
            <returns>List of strings with each of the tags returned</returns>
            <remarks>Both the title and the description can be passed empty but they can never be  both empty at the same time.</remarks>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.GetCommunityMembersEmailList">
            <summary>
            Get the community members email list
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.SetMainImageLoadedImage(System.Guid,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Sets the resource main image. The resource and the image must be loaded.  
            </summary>
            <param name="resourceId">resource identifier</param>
            <param name="imageName">image name string</param>
            <param name="sizes">Availables sizes of the image, the main size must be the first of the list. [IMGPrincipal][318,234,992,]cce87492-2a13-4fc5-80a9-b3d59b63a2f1.jpg.</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.GetHierarquicalCategoriesIdentifiersList(System.Collections.Generic.List{System.String})">
            <summary>
            Returns the identifiers of the categories
            </summary>
            <param name="hierarquicalCategoriesList">List of names of hierarchical categories</param>
            <returns>The identifiers of the categories as list of string</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.GetNotHierarquicalCategoriesIdentifiersList(System.Collections.Generic.List{System.String})">
            <summary>
            This method obtains the categories identifiers of the community thesaurus for each of the categories of the resource to load, considering the case of a multilanguage thesaurus.For each of the thesaurus category, it first checks if the thesaurus is multilanguage (in this case, it contains |||), then each of these categories is converted to string[] and every component of the string is compared with every single resource category.If they are equal, the identifier of this category is obtained and stored in the list of the resource categories. If that is not a multilanguage thesaurus, it checks if the dictionary with the thesaurus categories contains a key that is equal to the category of the resource and if if finds it, the category identifier is stored in the list of resource categories.
            </summary>
            <param name="notHierarquicalCategoriesList">List of names of not hierarchical categories</param>
            <returns>The identifiers of the categories as list of string of the resource to load</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.LoadComplexSemanticResourceListInt(System.Collections.Generic.List{Gnoss.ApiWrapper.Model.ComplexOntologyResource},System.Boolean,System.Int32,System.String,System.String)">
            <summary>
            Load a complex semantic resources list
            </summary>
            <param name="resourceList">List of resources to load</param>
            <param name="hierarquicalCategories">Indicates whether the categories has hierarchy</param>
            <param name="numAttemps">Default 2. Number of retries loading of the failed load of a resource</param>
            <param name="communityShortName">Default null. Defined if it is necessary the load in other community that the specified in the OAuth</param>
            <param name="rdfsPath">Default null. Path to save the RDF, if necessary</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.LoadComplexSemanticResourceListWithOntologyAndCommunityInt(System.Collections.Generic.List{Gnoss.ApiWrapper.Model.ComplexOntologyResource},System.Boolean,System.String,System.String,System.Int32)">
            <summary>
            Load resources of main entities in an otology and a community
            </summary>
            <param name="resourceList">List of resources to load</param>
            <param name="hierarquicalCategories">Indicates whether the categories has hierarchy</param>
            <param name="ontology">Ontology where resource will be loaded</param>
            <param name="communityShortName">Community short name where the resources will be loaded</param>
            <param name="numAttemps">Default 1. Number of retries loading of the failed load of a resource</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.LoadComplexSemanticResourceWithOntologyAndCommunityInt(Gnoss.ApiWrapper.Model.ComplexOntologyResource,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            Load a complex semantic resources in an otology and a community
            </summary>
            <param name="resource">Resource to load</param>
            <param name="hierarquicalCategories">Indicates whether the categories has hierarchy</param>
            <param name="isLast">There are not resources left to load</param>
            <param name="ontology">Ontology where resource will be loaded</param>
            <param name="communityShortName">Community short name where the resources will be loaded</param>
            <returns>Resource identifier string</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.LoadBasicOntologyResourceInt(Gnoss.ApiWrapper.Model.BasicOntologyResource,System.Boolean,Gnoss.ApiWrapper.ApiModel.TiposDocumentacion,System.Boolean)">
            <summary>
            Loads a basic ontology resource
            </summary>
            <param name="resource">Basic intology resource to load</param>
            <param name="hierarquicalCategories">Indicates whether the categories has hierarchy</param>
            <param name="resourceType">Indicates the type of resource to load</param>
            <param name="isLast">Indicates There are not resources left to load</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.LoadIdentifierGenerator">
            <summary>         
             Register a unique identifier for large load of resources. If any problem occurs, you will recive an email at DeveloperMail with this identifier and the error's description. 
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.GetPendingActions(System.String)">
            <summary>
            Method to know if there are pending resources in a community
            </summary>
            <returns>The number of pending actions in a community</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.GetCommunityShortNameByResourceID(System.Guid)">
            <summary>
            Gets the community short name to which a resource belongs
            </summary>
            <param name="resourceId">Resource identifier</param>
            <returns>Community short name"</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.HasUserEditingPermissionOnResourceByCommunityName(System.Guid,System.Guid)">
            <summary>
            Checks whether the user has permission on the resource editing
            </summary>
            <param name="resourceId">Resource identifier</param>
            <param name="userId">User identifier</param>
            <returns>True if the user has editing permission on the resource. False if not.</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.HasUserEditingPermissionOnResourceByCommunityID(System.Guid,System.Guid,System.Guid)">
            <summary>
            Checks whether the user has permission on the resource editing
            </summary>
            <param name="resourceId">Resource identifier</param>
            <param name="userId">User identifier</param>
            <param name="communityId">Community identifier</param>
            <returns>True if the user has editing permission on the resource. False if not.</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.GetResourceVisibility(System.Guid)">
            <summary>
            Gets the visibility of the resource
            </summary>
            <param name="resourceId">Resource identifier</param>
            <returns>ResourceVisibility with the visibility of the resource. Null if it fails</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.GetRelatedResourcesFromList(System.Collections.Generic.List{System.Guid})">
            <summary>
            Gets the related resources of a list of resources
            </summary>
            <param name="resourceIds">Resource identifiers</param>
            <returns>Related resources</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.GetRelatedResources(System.Guid)">
            <summary>
            Gets the related resources of a resource
            </summary>
            <param name="resourceId">Resource identifier</param>
            <returns>Related resources</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.GetCommunitiesResourceShared(System.Guid)">
            <summary>
            Gets the communities where a resource has been shared
            </summary>
            <param name="resourceId">Resource identifier</param>
            <returns>List of community names</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.GetResourceReaders(System.Guid)">
            <summary>
            Gets the readers or the readers groups short name of the resource
            </summary>
            <param name="resourceId">Resource identifier</param>
            <returns>List of strings with the short names</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.UnsharedCommunityResource(System.Guid,System.String)">
            <summary>
            Unshare resource of a community
            </summary>
            <param name="resourceId">Resource identifier</param>
            <param name="communityShortName">Community short name</param>
            <returns>True if the resource has been unshared. False if not.</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.InsertPropertiesLoadedResource(System.Guid,System.Collections.Generic.List{Gnoss.ApiWrapper.ApiModel.Triple},System.Boolean,System.String)">
            <summary>
            Inserts properties in Triples format in a loaded resource
            To create a new secondary entity, this properties must be sent: 
            .- Property of the parent resource
            .- rdfType
            .- rdfLabel
            .- The property hasEntidad of the secondaryEntity: subject = GraphsUrl + resource, predicate = http://gnoss/hasEntidad, and object = the property binded with the parent resource
            .- The properties of the secondary entities
            </summary>
            <param name="resourceId">Resource identifier</param>
            <param name="tripleList">List of Triple</param>
            <param name="publishHome">(Optional) True if this resource must appear in the community home</param>
            <param name="communityShortName">(Optional) Community short name where the resource is published</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.DeletePropertiesLoadedResource(System.Guid,System.Collections.Generic.List{Gnoss.ApiWrapper.ApiModel.Triple},System.Boolean,System.String)">
            <summary>
            Delete a list of triples from a loaded resource
            </summary>
            <param name="resourceId">Resource identifier</param>
            <param name="tripleList">List of Triple to delete</param>
            <param name="publishHome">(Optional) True if this resource appeared in the community home</param>
            <param name="communityShortName">(Optional) Community short name where the resource is published</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.GetEditors(System.Collections.Generic.List{System.Guid})">
            <summary>
            Gets the short names of resource editors and editors groups.
            </summary>
            <param name="resourceId_list">resources identifiers list</param>
            <returns>List with the short names of editors and editors groups</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.GetDownloadUrl(System.Collections.Generic.List{System.Guid})">
            <summary>
            Gets the resources download urls
            </summary>
            <param name="resourceId_list">Resources identifiers list</param>
            <returns>ResponseGetUrl list with the existent resources download urls</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.GetUrl(System.Collections.Generic.List{System.Guid},System.String)">
            <summary>
            Gets the resources urls in the indicated language
            </summary>
            <param name="resourceId_list">Resources identifiers list</param>
            <param name="language">language code string</param>
            <returns>Resource.ResponseGetUrl list with the existent resources urls</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.SetReaders(System.Guid,Gnoss.ApiWrapper.ApiModel.ResourceVisibility,System.Collections.Generic.List{Gnoss.ApiWrapper.ApiModel.ReaderEditor},System.Boolean)">
            <summary>
            Sets the readers of the resuorce
            </summary>
            <param name="resourceId">Resource identifier</param>
            <param name="visibility">Resource visibility</param>
            <param name="readers_list">Resource readers</param>
            <param name="publishHome">Indicates whether the home must be updated</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.SetEditors(System.Guid,Gnoss.ApiWrapper.ApiModel.ResourceVisibility,System.Collections.Generic.List{Gnoss.ApiWrapper.ApiModel.ReaderEditor},System.Boolean)">
            <summary>
            Sets the readers of the resuorce
            </summary>
            <param name="resourceId">Resource identifier</param>
            <param name="visibility">Resource visibility</param>
            <param name="readers_list">Resource readers</param>
            <param name="publishHome">Indicates whether the home must be updated</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.GetCreatorEmail(System.Collections.Generic.List{System.Guid})">
            <summary>
            Gets the email of the resources creators
            </summary>
            <param name="resourceId_list">Resources identifiers list</param>
            <returns>ResponseGetCreatorEmail list with the email of the resources creators</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.GetCategories(System.Collections.Generic.List{System.Guid})">
            <summary>
            Gets the categories of the resources
            </summary>
            <param name="resourceId_list">Resources identifiers list</param>
            <returns>ResponseGetCategories list with the category identifiers of the existent resources</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.GetTags(System.Collections.Generic.List{System.Guid})">
            <summary>
            Gets the tags of the resources
            </summary>
            <param name="resourceId_list">Resources identifiers list</param>
            <returns>ResponseGetTags list with the tags of the resources</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.GetMainImage(System.Collections.Generic.List{System.Guid})">
            <summary>
            Gets the main image of the resources
            </summary>
            <param name="resourceId_list">Resources identifiers list</param>
            <returns>ResponseGetMainImage list with the path of the main image of the resources and their available sizes</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.GetRDF(System.Guid)">
            <summary>
            Gets the rdf of the complex semanthic resource
            </summary>
            <param name="resourceId">Resource identifier</param>
            <returns>String with the rdf of the resource</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.InsertAttribute(System.String,System.String)">
            <summary>
            Inserts the value in the graph
            </summary>
            <param name="graph">Graph identifier</param>
            <param name="value">Value to insert in the graph</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.Delete(System.Guid,System.String,System.Boolean)">
            <summary>
            Logical delete of the resource
            </summary>
            <param name="resourceId">Resource identifier</param>
            <param name="loadId">charge identifier</param>
            <param name="endOfCharge">marks the end of the charge</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.PersistentDelete(System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Persistent delete of the resource
            </summary>
            <param name="resourceId">Resource identifier</param>
            <param name="deleteAttached">indicates if the attached resources must be deleted</param>
            <param name="endOfCharge">marks the end of the charge</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.ExistsUrl(System.String)">
            <summary>
            Checks whether the url exists in a resource of the community. (Searchs on the resource description)
            </summary>
            <param name="url">link to search in the community</param>
            <returns>True if the link exists in a resource of the community</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.UploadImages(System.Guid,System.Collections.Generic.List{Gnoss.ApiWrapper.ApiModel.SemanticAttachedResource},System.String)">
            <summary>
            Loads the images of a not yet loaded resource.
            </summary>
            <param name="resourceId">Resource identifier</param>
            <param name="imageList">resource attached files. List of SemanticAttachedResource</param>
            SemanticAttachedResource:
                file_rdf_properties = image name
                file_property_type = type of file
                rdf_attached_files = image to load
            <param name="mainImage">main image string</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.Share(System.String,System.Guid,System.Collections.Generic.List{System.Guid})">
            <summary>
            Shares the resource in the target community
            </summary>
            <param name="targetCommunity">target community short name string</param>
            <param name="categories">categories guid list where the document is going to be shared to</param>
            <param name="resourceId">resource identifier Guid</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.SetMainImage(System.Guid,System.String)">
            <summary>
            Sets the resource main image
            </summary>
            <param name="resourceId">resource identifier Guid</param>
            <param name="path">relative path with the image name, image sizes available and '[IMGPrincipal]' mask</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.Comment(System.Guid,System.String,System.String,System.Guid,System.DateTime,System.Boolean)">
            <summary>
            Adds a comment in a resource. It can be a response of another parent comment.
            </summary>
            <param name="resourceId">resource identifier</param>
            <param name="commentDate">publish date of the comment</param>
            <param name="description">Html content of the comment wrapped in a Html paragraph and special characters encoded in ANSI. Example: <p>Descripci&amp;oacute;n del comentario</p> string</param>
            <param name="parentCommentId">optional parent comment identifier Guid. The current comment is its answer</param>
            <param name="publishHome">indicates whether the home must be updated</param>
            <param name="userShortName">publisher user short name</param>
            <returns>Comment identifier</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.ModifyProperty(System.Guid,System.String,System.String)">
            <summary>
            Modfies a property of a resource
            </summary>
            <param name="resourceId">resource identifier guid</param>
            <param name="newObject">new value of the property</param>
            <param name="property">property to modify</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.CreateBasicOntologyResource(Gnoss.ApiWrapper.ApiModel.LoadResourceParams)">
            <summary>
            Creates a basic ontology resource
            </summary>
            <param name="parameters"></param>
            <returns>resource identifier guid</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.CreateComplexOntologyResource(Gnoss.ApiWrapper.ApiModel.LoadResourceParams)">
            <summary>
            Creates a complex ontology resource
            </summary>
            <param name="parameters"></param>
            <returns>resource identifier guid</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.ModifyComplexOntologyResource(Gnoss.ApiWrapper.ApiModel.LoadResourceParams)">
            <summary>
            Modifies a complex ontology resource
            </summary>
            <param name="parameters"></param>
            <returns>resource identifier guid</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.ModifyBasicOntologyResource(Gnoss.ApiWrapper.ApiModel.LoadResourceParams)">
            <summary>
            Modifies a basic ontology resource
            </summary>
            <param name="parameters"></param>
            <returns>resource identifier guid</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.ModifyTripleList(System.Guid,System.Collections.Generic.List{Gnoss.ApiWrapper.ApiModel.ModifyResourceTriple},System.String,System.Boolean,System.String,System.Collections.Generic.List{Gnoss.ApiWrapper.ApiModel.SemanticAttachedResource},System.Boolean)">
            <summary>
            Method to add / modify / delete triples of complex ontology resource
            </summary>
            <param name="resourceId">resource identifier guid</param>
            <param name="triplesList">resource triples list to modify</param>
            <param name="loadId">charge identifier string</param>
            <param name="resourceAttachedFiles">resource attached files list</param>
            <param name="mainImage">main image string</param>
            <param name="publishHome">indicates whether the home must be updated</param>
            <param name="endOfLoad">indicates the resource modified is the last and it must deletes cache</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.ModifyMultipleResourcesTripleList(System.Collections.Generic.Dictionary{System.Guid,System.Collections.Generic.List{Gnoss.ApiWrapper.ApiModel.ModifyResourceTriple}},System.String,System.Boolean,System.String,System.Collections.Generic.Dictionary{System.Guid,System.Collections.Generic.List{Gnoss.ApiWrapper.ApiModel.SemanticAttachedResource}})">
            <summary>
            Method to add / modify / delete triples of multiple complex ontology resources
            </summary>
            <param name="multipleResourcesTriples">Dictionary with resource identifier guid and the resource triples list to modify. <see cref="T:Gnoss.ApiWrapper.ApiModel.ModifyResourceTriple"/></param>
            <param name="loadId">charge identifier string</param>
            <param name="multipleResourcesAttachedFiles">Dictionary with resource identifier guid and the resource attached files list. <see cref="T:Gnoss.ApiWrapper.ApiModel.SemanticAttachedResource"/></param>
            <param name="mainImage">main image string</param>
            <param name="publishHome">indicates whether the home must be updated</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.MassiveTriplesModify(Gnoss.ApiWrapper.ApiModel.MassiveTripleModifyParameters)">
            <summary>
            Modify a big list of triples
            </summary>
            <param name="parameters">Parameters for the modification</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.GetModifiedResourcesFromDate(System.String,System.String)">
            <summary>
            Gets the modified resources from a datetime in a community
            </summary>
            <param name="communityShortName">Community short name</param>
            <param name="searchDate">Start search datetime in ISO8601 format string ("yyyy-MM-ddTHH:mm:ss.mmm" (no spaces) OR "yyyy-MM-ddTHH:mm:ss.mmmZ" (no spaces))</param>
            <returns>List with the modified resources identifiers</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.GetResourceNoveltiesFromDate(System.Guid,System.String,System.String)">
            <summary>
            Gets the novelties of the resource from a datetime
            </summary>
            <param name="resourceId">Resource identifier</param>
            <param name="communityShortName">Community short name</param>
            <param name="searchDate">Start search datetime in ISO8601 format string ("yyyy-MM-ddTHH:mm:ss.mmm" (no spaces) OR "yyyy-MM-ddTHH:mm:ss.mmmZ" (no spaces))</param>
            <returns>ResourceNoveltiesModel with the novelties of the resource from the search date</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.ChangeOntoly(System.String)">
            <summary>
            Changes the current ontology by the indicated ontology.
            </summary>
            <param name="newOntology">New ontology name</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.RegisterLoadIdentifier(System.String)">
            <summary>
            Register a load identifier to load resources to the community
            </summary>
            <param name="loadIdentifier">Identifier to register</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.CheckLoadIdentifier(System.String)">
            <summary>
            Check if a load identifier is already registered
            </summary>
            <param name="loadIdentifier">identifier to check</param>
            <returns>True if the load identifier is already registered</returns>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.LoadApi">
            <summary>
            Load the basic parameters for the API
            </summary>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.ReadConfigFile(System.Xml.XmlDocument)">
            <summary>
            Read the configuration from a configuration file
            </summary>
            <param name="docXml">XmlDocument with the configuration</param>
        </member>
        <member name="M:Gnoss.ApiWrapper.ResourceApi.LoadEnvironmentVariables">
            <summary>
            Read the configuration from the environment variables
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ResourceApi.GraphsUrl">
            <summary>
            Gets or sets the default url for graphs
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ResourceApi.OntologyUrl">
            <summary>
            Gets or sets the ontology url
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ResourceApi.OntologyNameWithoutExtension">
            <summary>
            Gets the ontology name without extension
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ResourceApi.OntologyNameWithExtension">
            <summary>
            Gets the ontology name with extension
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ResourceApi.LoadIdentifier">
            <summary>
            Identifier for large load of resources. If any problem occurs, you will recive an email at DeveloperMail with this identifier and the error's description. 
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ResourceApi.CommunityApiWrapper">
            <summary>
            Gets the wrapper for community API
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ResourceApi.DeveloperEmail">
            <summary>
            Developer's email, who will be informed of any problem during a large load of resources. 
            </summary>
        </member>
        <member name="P:Gnoss.ApiWrapper.ResourceApi.OntologyName">
            <summary>
            Gets or sets the ontology name
            </summary>
        </member>
        <member name="T:Es.Riam.Util.UtilTelemetry.LogsAndTracesLocation">
            <summary>
            Location of the information stored by logs and traces
            </summary>
        </member>
        <member name="F:Es.Riam.Util.UtilTelemetry.LogsAndTracesLocation.File">
            <summary>
            Indicates the logs and traces information will be saved in a file
            </summary>
        </member>
        <member name="F:Es.Riam.Util.UtilTelemetry.LogsAndTracesLocation.ApplicationInsights">
            <summary>
            Indicates the logs and traces information will be sent to ApplicationInsights
            </summary>
        </member>
        <member name="F:Es.Riam.Util.UtilTelemetry.LogsAndTracesLocation.FileAndAppInsights">
            <summary>
            Indicates the logs and traces information will be saved in a file and sent to ApplicationInsights
            </summary>
        </member>
        <member name="P:Es.Riam.Util.UtilTelemetry.EstaConfiguradaTelemetria">
            <summary>
            Indica si está configurado el envío de métricas con Application Insights
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
